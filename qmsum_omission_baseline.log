Parameter 'function'=<function get_datasets.<locals>.preprocess_function at 0x7e0f7892ac10> of the transform datasets.arrow_dataset.Dataset._map_single couldn't be hashed properly, a random hash was used instead. Make sure your transforms and parameters are serializable with pickle or dill for the dataset fingerprinting and caching to work. If you reuse this transform, the caching mechanism will consider it to be different from the previous calls and recompute everything. This warning is only showed once. Subsequent hashing failures won't be showed.
Round 1
Start Training!
Sample 261 of the training set: {'input_ids': [0, 2264, 21, 5, 6427, 59, 33664, 15, 5, 92, 6398, 17467, 77, 51, 58, 7345, 5, 20273, 9, 5, 2210, 6398, 17467, 116, 47385, 50121, 50118, 44518, 39322, 35, 152, 65, 16, 25522, 417, 32062, 6920, 254, 24303, 300, 10, 761, 9, 25715, 101, 10, 18292, 2156, 50121, 50118, 33347, 4827, 35, 256, 119, 12, 298, 5471, 2156, 101, 5, 1692, 6148, 479, 50121, 50118, 44518, 39322, 35, 61, 25522, 417, 32062, 6920, 254, 24303, 8976, 479, 50121, 50118, 33347, 4827, 35, 8487, 479, 50121, 50118, 44518, 39322, 35, 12698, 8, 25522, 417, 32062, 6920, 254, 24303, 125, 38, 437, 45, 2230, 686, 141, 47, 1017, 304, 14, 2156, 50121, 50118, 36926, 13700, 31275, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 7746, 24, 18, 24282, 101, 33664, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 44518, 39322, 35, 101, 74, 5, 3034, 283, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 33347, 4827, 35, 37463, 235, 2156, 157, 2156, 114, 38, 579, 114, 38, 437, 2053, 9, 5, 235, 65, 2156, 38, 348, 300, 5, 276, 631, 11, 760, 9, 127, 5271, 2156, 47, 25715, 24, 8, 5, 77, 47, 1338, 5, 2345, 9, 7252, 25522, 31375, 1536, 9834, 24303, 5765, 6880, 14, 47, 2703, 2156, 47, 1228, 5, 1692, 9, 5, 25715, 479, 50121, 50118, 44518, 39322, 35, 23129, 12, 298, 2957, 2156, 14, 18, 101, 5, 226, 1215, 347, 1215, 495, 1215, 65, 2156, 50121, 50118, 33347, 4827, 35, 5143, 2156, 8578, 479, 50121, 50118, 44518, 39322, 35, 16, 24, 17487, 125, 5, 65, 874, 14, 34, 300, 101, 25522, 31375, 1536, 9834, 24303, 10, 410, 25715, 5043, 15, 5, 526, 479, 125, 38, 38337, 14, 5, 8047, 531, 283, 62, 15, 5, 255, 1215, 846, 1215, 2441, 479, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 8976, 479, 50121, 50118, 33347, 4827, 35, 8976, 2156, 15546, 479, 50121, 50118, 44518, 39322, 35, 38, 206, 14, 18, 99, 14, 16, 479, 407, 209, 32, 95, 10, 367, 2956, 479, 7574, 14, 18, 95, 1341, 15305, 3989, 2156, 10521, 2156, 1326, 1341, 980, 12, 1580, 219, 2156, 53, 350, 171, 14893, 2156, 38, 206, 15, 14, 65, 479, 50121, 50118, 36926, 13700, 31275, 35, 23129, 24, 1326, 5608, 479, 50121, 50118, 33347, 4827, 35, 8976, 2156, 1326, 101, 37463, 1326, 101, 402, 66, 9, 10, 4900, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 44518, 39322, 35, 8976, 2156, 24, 473, 356, 761, 9, 2702, 479, 50121, 50118, 36926, 13700, 31275, 35, 25522, 31375, 1536, 9834, 24303, 85, 1326, 101, 11380, 25522, 29183, 24303, 479, 50121, 50118, 10006, 16382, 35, 44258, 479, 2], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'labels': [0, 133, 27913, 39322, 969, 5, 3493, 9, 65, 761, 9, 6398, 17467, 19, 45726, 15, 24, 6, 447, 25, 5, 1692, 14893, 4, 318, 5, 2360, 770, 7, 465, 10, 1402, 6880, 6, 51, 95, 956, 7, 25715, 24, 8, 77, 51, 1348, 5, 1552, 1980, 6, 51, 11224, 5, 1692, 9, 5, 25715, 4, 2223, 5, 165, 21, 45, 10028, 19, 5, 7705, 6, 3989, 8, 14893, 9, 5, 2210, 6, 51, 70, 1507, 14, 5, 5043, 9, 10, 25715, 21, 10, 205, 1114, 4, 2]}.
***** Running training *****
  Num examples = 986
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9860
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 15.5963, 'rouge2': 1.1839, 'rougeL': 13.6516, 'rougeLsum': 14.8599}, 'ppl': {'perplexity': 186.3129, 'ref_perplexity': 635.4263}, 'bertscore': {'precision': 75.3805, 'recall': 79.2446, 'f1': 77.2581}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 17.0741, 'rouge2': 4.8528, 'rougeL': 14.0311, 'rougeLsum': 15.6995}, 'ppl': {'perplexity': 72.2857, 'ref_perplexity': 259.381}, 'bertscore': {'precision': 86.8833, 'recall': 83.3258, 'f1': 85.0616}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 17.4478, 'rouge2': 5.6063, 'rougeL': 14.1441, 'rougeLsum': 16.2911}, 'ppl': {'perplexity': 7.5921, 'ref_perplexity': 187.666}, 'bertscore': {'precision': 87.8384, 'recall': 83.556, 'f1': 85.6374}}
Parameter 'function'=<function get_datasets.<locals>.preprocess_function at 0x7ca739dee550> of the transform datasets.arrow_dataset.Dataset._map_single couldn't be hashed properly, a random hash was used instead. Make sure your transforms and parameters are serializable with pickle or dill for the dataset fingerprinting and caching to work. If you reuse this transform, the caching mechanism will consider it to be different from the previous calls and recompute everything. This warning is only showed once. Subsequent hashing failures won't be showed.
Round 1
Start Training!
Sample 261 of the training set: {'input_ids': [0, 2264, 21, 5, 6427, 59, 33664, 15, 5, 92, 6398, 17467, 77, 51, 58, 7345, 5, 20273, 9, 5, 2210, 6398, 17467, 116, 47385, 50121, 50118, 44518, 39322, 35, 152, 65, 16, 25522, 417, 32062, 6920, 254, 24303, 300, 10, 761, 9, 25715, 101, 10, 18292, 2156, 50121, 50118, 33347, 4827, 35, 256, 119, 12, 298, 5471, 2156, 101, 5, 1692, 6148, 479, 50121, 50118, 44518, 39322, 35, 61, 25522, 417, 32062, 6920, 254, 24303, 8976, 479, 50121, 50118, 33347, 4827, 35, 8487, 479, 50121, 50118, 44518, 39322, 35, 12698, 8, 25522, 417, 32062, 6920, 254, 24303, 125, 38, 437, 45, 2230, 686, 141, 47, 1017, 304, 14, 2156, 50121, 50118, 36926, 13700, 31275, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 7746, 24, 18, 24282, 101, 33664, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 44518, 39322, 35, 101, 74, 5, 3034, 283, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 33347, 4827, 35, 37463, 235, 2156, 157, 2156, 114, 38, 579, 114, 38, 437, 2053, 9, 5, 235, 65, 2156, 38, 348, 300, 5, 276, 631, 11, 760, 9, 127, 5271, 2156, 47, 25715, 24, 8, 5, 77, 47, 1338, 5, 2345, 9, 7252, 25522, 31375, 1536, 9834, 24303, 5765, 6880, 14, 47, 2703, 2156, 47, 1228, 5, 1692, 9, 5, 25715, 479, 50121, 50118, 44518, 39322, 35, 23129, 12, 298, 2957, 2156, 14, 18, 101, 5, 226, 1215, 347, 1215, 495, 1215, 65, 2156, 50121, 50118, 33347, 4827, 35, 5143, 2156, 8578, 479, 50121, 50118, 44518, 39322, 35, 16, 24, 17487, 125, 5, 65, 874, 14, 34, 300, 101, 25522, 31375, 1536, 9834, 24303, 10, 410, 25715, 5043, 15, 5, 526, 479, 125, 38, 38337, 14, 5, 8047, 531, 283, 62, 15, 5, 255, 1215, 846, 1215, 2441, 479, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 8976, 479, 50121, 50118, 33347, 4827, 35, 8976, 2156, 15546, 479, 50121, 50118, 44518, 39322, 35, 38, 206, 14, 18, 99, 14, 16, 479, 407, 209, 32, 95, 10, 367, 2956, 479, 7574, 14, 18, 95, 1341, 15305, 3989, 2156, 10521, 2156, 1326, 1341, 980, 12, 1580, 219, 2156, 53, 350, 171, 14893, 2156, 38, 206, 15, 14, 65, 479, 50121, 50118, 36926, 13700, 31275, 35, 23129, 24, 1326, 5608, 479, 50121, 50118, 33347, 4827, 35, 8976, 2156, 1326, 101, 37463, 1326, 101, 402, 66, 9, 10, 4900, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 44518, 39322, 35, 8976, 2156, 24, 473, 356, 761, 9, 2702, 479, 50121, 50118, 36926, 13700, 31275, 35, 25522, 31375, 1536, 9834, 24303, 85, 1326, 101, 11380, 25522, 29183, 24303, 479, 50121, 50118, 10006, 16382, 35, 44258, 479, 2], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'labels': [0, 133, 27913, 39322, 969, 5, 3493, 9, 65, 761, 9, 6398, 17467, 19, 45726, 15, 24, 6, 447, 25, 5, 1692, 14893, 4, 318, 5, 2360, 770, 7, 465, 10, 1402, 6880, 6, 51, 95, 956, 7, 25715, 24, 8, 77, 51, 1348, 5, 1552, 1980, 6, 51, 11224, 5, 1692, 9, 5, 25715, 4, 2223, 5, 165, 21, 45, 10028, 19, 5, 7705, 6, 3989, 8, 14893, 9, 5, 2210, 6, 51, 70, 1507, 14, 5, 5043, 9, 10, 25715, 21, 10, 205, 1114, 4, 2]}.
***** Running training *****
  Num examples = 986
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9860
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 15.5963, 'rouge2': 1.1839, 'rougeL': 13.6516, 'rougeLsum': 14.8599}, 'ppl': {'perplexity': 186.3129, 'ref_perplexity': 635.4263}, 'bertscore': {'precision': 75.3805, 'recall': 79.2446, 'f1': 77.2581}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 17.0741, 'rouge2': 4.8528, 'rougeL': 14.0311, 'rougeLsum': 15.6995}, 'ppl': {'perplexity': 72.2857, 'ref_perplexity': 259.381}, 'bertscore': {'precision': 86.8833, 'recall': 83.3258, 'f1': 85.0616}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 17.4478, 'rouge2': 5.6063, 'rougeL': 14.1441, 'rougeLsum': 16.2911}, 'ppl': {'perplexity': 7.5921, 'ref_perplexity': 187.666}, 'bertscore': {'precision': 87.8384, 'recall': 83.556, 'f1': 85.6374}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 21.4477, 'rouge2': 6.4204, 'rougeL': 16.2234, 'rougeLsum': 19.7261}, 'ppl': {'perplexity': 19.34, 'ref_perplexity': 161.679}, 'bertscore': {'precision': 86.8625, 'recall': 83.5997, 'f1': 85.1925}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.8854, 'rouge2': 6.8047, 'rougeL': 17.3983, 'rougeLsum': 21.9566}, 'ppl': {'perplexity': 26.2311, 'ref_perplexity': 157.7885}, 'bertscore': {'precision': 85.008, 'recall': 83.9125, 'f1': 84.4512}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.9443, 'rouge2': 7.8335, 'rougeL': 18.0302, 'rougeLsum': 23.7787}, 'ppl': {'perplexity': 31.3826, 'ref_perplexity': 159.3908}, 'bertscore': {'precision': 85.3258, 'recall': 83.9929, 'f1': 84.6466}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.8074, 'rouge2': 7.3642, 'rougeL': 18.0869, 'rougeLsum': 22.8364}, 'ppl': {'perplexity': 9.7995, 'ref_perplexity': 169.267}, 'bertscore': {'precision': 86.8773, 'recall': 84.4282, 'f1': 85.6286}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.5089, 'rouge2': 7.5028, 'rougeL': 17.5441, 'rougeLsum': 22.8339}, 'ppl': {'perplexity': 30.7267, 'ref_perplexity': 180.0491}, 'bertscore': {'precision': 86.2416, 'recall': 84.278, 'f1': 85.2418}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.6707, 'rouge2': 7.7217, 'rougeL': 18.7283, 'rougeLsum': 24.8649}, 'ppl': {'perplexity': 21.1702, 'ref_perplexity': 197.6733}, 'bertscore': {'precision': 85.6714, 'recall': 84.4063, 'f1': 85.0287}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.3661, 'rouge2': 7.0773, 'rougeL': 17.8906, 'rougeLsum': 23.7887}, 'ppl': {'perplexity': 28.4493, 'ref_perplexity': 230.0626}, 'bertscore': {'precision': 86.2253, 'recall': 84.531, 'f1': 85.3641}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.9804, 'rouge2': 7.4741, 'rougeL': 18.3449, 'rougeLsum': 24.5183}, 'ppl': {'perplexity': 33.7779, 'ref_perplexity': 254.1859}, 'bertscore': {'precision': 85.8931, 'recall': 84.6089, 'f1': 85.2418}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 28.491, 'rouge2': 6.9412, 'rougeL': 18.0163, 'rougeLsum': 24.6727}, 'ppl': {'perplexity': 19.1117, 'ref_perplexity': 280.8946}, 'bertscore': {'precision': 85.7459, 'recall': 84.5929, 'f1': 85.1601}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.4214, 'rouge2': 6.6062, 'rougeL': 18.1192, 'rougeLsum': 24.1808}, 'ppl': {'perplexity': 57.582, 'ref_perplexity': 322.3678}, 'bertscore': {'precision': 85.9339, 'recall': 84.6652, 'f1': 85.2892}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.4398, 'rouge2': 6.4385, 'rougeL': 17.6738, 'rougeLsum': 23.3132}, 'ppl': {'perplexity': 30.5324, 'ref_perplexity': 359.343}, 'bertscore': {'precision': 85.9532, 'recall': 84.4822, 'f1': 85.2066}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 28.1421, 'rouge2': 6.7064, 'rougeL': 17.9303, 'rougeLsum': 24.7723}, 'ppl': {'perplexity': 19.2004, 'ref_perplexity': 375.9243}, 'bertscore': {'precision': 85.7826, 'recall': 84.6954, 'f1': 85.2305}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.6763, 'rouge2': 6.2162, 'rougeL': 17.6489, 'rougeLsum': 23.1075}, 'ppl': {'perplexity': 44.5182, 'ref_perplexity': 410.1743}, 'bertscore': {'precision': 85.7505, 'recall': 84.6297, 'f1': 85.1818}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.1706, 'rouge2': 5.5528, 'rougeL': 16.8843, 'rougeLsum': 22.7522}, 'ppl': {'perplexity': 23.9638, 'ref_perplexity': 444.2908}, 'bertscore': {'precision': 85.6141, 'recall': 84.5771, 'f1': 85.0864}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.2173, 'rouge2': 5.6421, 'rougeL': 17.0586, 'rougeLsum': 22.6721}, 'ppl': {'perplexity': 28.0568, 'ref_perplexity': 458.2338}, 'bertscore': {'precision': 85.6611, 'recall': 84.6528, 'f1': 85.1491}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.8855, 'rouge2': 5.9008, 'rougeL': 17.3457, 'rougeLsum': 23.132}, 'ppl': {'perplexity': 24.1949, 'ref_perplexity': 475.5044}, 'bertscore': {'precision': 85.6247, 'recall': 84.6349, 'f1': 85.1218}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.7108, 'rouge2': 6.0494, 'rougeL': 17.2594, 'rougeLsum': 23.2801}, 'ppl': {'perplexity': 25.9608, 'ref_perplexity': 482.5764}, 'bertscore': {'precision': 85.52, 'recall': 84.6147, 'f1': 85.06}}

Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Round 2
Start Training!
Sample 870 of the training set: {'input_ids': [0, 2264, 222, 27913, 39322, 206, 9, 5, 40363, 9, 10, 762, 19320, 77, 7345, 1254, 15, 5, 92, 6063, 797, 2496, 8, 10, 563, 13, 5, 220, 529, 116, 47385, 50121, 50118, 33347, 4827, 35, 36420, 101, 10, 10, 319, 9, 5, 6411, 115, 28, 160, 5, 15263, 2156, 98, 25522, 417, 32062, 6920, 254, 24303, 38, 218, 75, 2230, 99, 701, 74, 28, 18982, 479, 12698, 38, 64, 192, 110, 477, 59, 5, 346, 762, 19320, 2156, 53, 38, 348, 25522, 417, 32062, 6920, 254, 24303, 38, 74, 224, 14, 52, 64, 1153, 14518, 24, 88, 5, 5765, 467, 114, 47, 240, 7, 109, 34038, 337, 9, 10, 739, 346, 9, 6237, 479, 50121, 50118, 36926, 13700, 31275, 35, 25522, 31375, 1536, 9834, 24303, 8976, 479, 50121, 50118, 44518, 39322, 35, 256, 119, 12, 298, 5471, 479, 50121, 50118, 36926, 13700, 31275, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 1308, 2157, 74, 28, 14, 190, 114, 23, 10, 423, 1248, 42, 21, 7, 28, 602, 797, 9, 7252, 25522, 29183, 24303, 7644, 25, 157, 7252, 519, 5, 304, 9, 5, 226, 1215, 347, 1215, 495, 1215, 8, 5, 46135, 74, 1153, 1157, 47, 7, 21922, 615, 4238, 1530, 13, 47, 7, 28, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 44518, 39322, 35, 8976, 2156, 888, 25522, 29183, 24303, 114, 47, 348, 300, 10, 319, 9, 6237, 2156, 5, 346, 762, 19320, 64, 28, 1341, 19887, 25, 157, 2156, 44949, 1180, 25522, 31375, 1536, 9834, 24303, 25522, 29183, 24303, 24, 18, 47, 216, 114, 47, 214, 667, 7, 2145, 99, 37463, 2156, 47, 216, 2156, 99, 346, 18, 5, 6953, 4238, 50, 3046, 479, 85, 18, 95, 38279, 479, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 280, 18, 10, 205, 477, 479, 50121, 50118, 44518, 39322, 35, 125, 114, 47, 1368, 25522, 31375, 1536, 9834, 24303, 53, 53, 53, 114, 47, 33, 10, 162, 53, 114, 47, 33, 10, 5765, 3184, 2156, 172, 47, 64, 2849, 12, 13839, 106, 479, 50121, 50118, 33347, 4827, 35, 256, 119, 12, 298, 5471, 479, 50121, 50118, 10006, 16382, 35, 370, 64, 14518, 2523, 88, 5, 5765, 479, 8487, 479, 50121, 50118, 44518, 39322, 35, 407, 47, 25522, 31375, 1536, 9834, 24303, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 33347, 4827, 35, 8487, 479, 50121, 50118, 10006, 16382, 35, 1648, 340, 2156, 930, 479, 2011, 51, 109, 15, 37463, 6360, 1778, 24282, 479, 50121, 50118, 44518, 39322, 35, 8976, 479, 50121, 50118, 10006, 16382, 35, 8976, 479, 2], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'labels': [0, 44518, 39322, 3273, 66, 14, 5, 762, 19320, 429, 26570, 877, 1434, 6, 13, 24, 21, 543, 13, 106, 7, 2145, 5, 6089, 346, 9, 358, 4238, 4, 2978, 6, 27913, 39322, 5131, 5, 20808, 2441, 5765, 2332, 4, 590, 5, 5765, 3184, 6, 6237, 115, 28, 357, 8967, 88, 2849, 36378, 4, 16034, 115, 766, 209, 2849, 36378, 25, 22, 2926, 1297, 22, 28400, 113, 8, 98, 15, 4, 2]}.
***** Running training *****
  Num examples = 986
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9860
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 13.8032, 'rouge2': 0.2108, 'rougeL': 12.2973, 'rougeLsum': 12.9397}, 'ppl': {'perplexity': 364.3328, 'ref_perplexity': 589.5274}, 'bertscore': {'precision': 77.4713, 'recall': 79.6065, 'f1': 78.5173}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 16.3601, 'rouge2': 5.6516, 'rougeL': 13.4075, 'rougeLsum': 15.0022}, 'ppl': {'perplexity': 106.4577, 'ref_perplexity': 238.1163}, 'bertscore': {'precision': 87.8942, 'recall': 83.9342, 'f1': 85.8623}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 20.9371, 'rouge2': 6.3299, 'rougeL': 16.5646, 'rougeLsum': 19.3366}, 'ppl': {'perplexity': 38.7831, 'ref_perplexity': 162.7416}, 'bertscore': {'precision': 87.9116, 'recall': 84.2215, 'f1': 86.0198}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.2878, 'rouge2': 7.4168, 'rougeL': 17.2879, 'rougeLsum': 21.9589}, 'ppl': {'perplexity': 84.0068, 'ref_perplexity': 148.8101}, 'bertscore': {'precision': 87.0701, 'recall': 84.4951, 'f1': 85.757}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 22.8753, 'rouge2': 6.982, 'rougeL': 16.7074, 'rougeLsum': 21.1045}, 'ppl': {'perplexity': 194.4392, 'ref_perplexity': 143.3429}, 'bertscore': {'precision': 86.2644, 'recall': 84.3614, 'f1': 85.2942}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.2323, 'rouge2': 7.7444, 'rougeL': 18.1782, 'rougeLsum': 23.7331}, 'ppl': {'perplexity': 22.1879, 'ref_perplexity': 150.7155}, 'bertscore': {'precision': 86.0249, 'recall': 84.7099, 'f1': 85.3562}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.8043, 'rouge2': 6.7872, 'rougeL': 18.0374, 'rougeLsum': 23.8109}, 'ppl': {'perplexity': 27.9795, 'ref_perplexity': 159.6757}, 'bertscore': {'precision': 85.9764, 'recall': 84.9721, 'f1': 85.4643}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.0778, 'rouge2': 7.0015, 'rougeL': 17.8813, 'rougeLsum': 23.3489}, 'ppl': {'perplexity': 30.9564, 'ref_perplexity': 175.7209}, 'bertscore': {'precision': 86.2767, 'recall': 84.8183, 'f1': 85.535}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.1714, 'rouge2': 7.1487, 'rougeL': 18.2058, 'rougeLsum': 24.279}, 'ppl': {'perplexity': 70.2714, 'ref_perplexity': 198.7307}, 'bertscore': {'precision': 85.9185, 'recall': 84.9992, 'f1': 85.4493}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.205, 'rouge2': 6.9556, 'rougeL': 17.988, 'rougeLsum': 24.1225}, 'ppl': {'perplexity': 41.3524, 'ref_perplexity': 229.2118}, 'bertscore': {'precision': 86.077, 'recall': 84.9969, 'f1': 85.5268}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.3362, 'rouge2': 6.5406, 'rougeL': 17.694, 'rougeLsum': 23.1576}, 'ppl': {'perplexity': 41.9843, 'ref_perplexity': 265.1037}, 'bertscore': {'precision': 86.1618, 'recall': 84.9562, 'f1': 85.549}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.5864, 'rouge2': 6.5099, 'rougeL': 17.3562, 'rougeLsum': 23.2809}, 'ppl': {'perplexity': 56.0738, 'ref_perplexity': 285.1476}, 'bertscore': {'precision': 85.7291, 'recall': 85.0621, 'f1': 85.3875}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.7346, 'rouge2': 6.4827, 'rougeL': 17.757, 'rougeLsum': 23.608}, 'ppl': {'perplexity': 39.4489, 'ref_perplexity': 332.5201}, 'bertscore': {'precision': 85.5913, 'recall': 85.1204, 'f1': 85.3485}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 28.1688, 'rouge2': 6.7456, 'rougeL': 18.2662, 'rougeLsum': 24.5292}, 'ppl': {'perplexity': 28.6264, 'ref_perplexity': 358.1675}, 'bertscore': {'precision': 85.6776, 'recall': 85.2264, 'f1': 85.4455}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 28.0668, 'rouge2': 6.6029, 'rougeL': 18.032, 'rougeLsum': 24.4884}, 'ppl': {'perplexity': 45.5967, 'ref_perplexity': 388.3878}, 'bertscore': {'precision': 85.7743, 'recall': 85.2455, 'f1': 85.5027}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.9447, 'rouge2': 6.1564, 'rougeL': 17.1489, 'rougeLsum': 23.6305}, 'ppl': {'perplexity': 81.9281, 'ref_perplexity': 422.2126}, 'bertscore': {'precision': 85.5319, 'recall': 85.1087, 'f1': 85.3143}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.176, 'rouge2': 5.9663, 'rougeL': 17.6922, 'rougeLsum': 22.9682}, 'ppl': {'perplexity': 69.3074, 'ref_perplexity': 445.2847}, 'bertscore': {'precision': 85.6459, 'recall': 85.1471, 'f1': 85.3899}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.79, 'rouge2': 6.1926, 'rougeL': 17.5191, 'rougeLsum': 23.12}, 'ppl': {'perplexity': 46.4152, 'ref_perplexity': 460.115}, 'bertscore': {'precision': 85.5677, 'recall': 85.2043, 'f1': 85.3799}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.8045, 'rouge2': 6.144, 'rougeL': 17.4077, 'rougeLsum': 23.2502}, 'ppl': {'perplexity': 60.274, 'ref_perplexity': 473.8988}, 'bertscore': {'precision': 85.5923, 'recall': 85.2135, 'f1': 85.3965}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.381, 'rouge2': 5.7723, 'rougeL': 17.0472, 'rougeLsum': 22.9435}, 'ppl': {'perplexity': 34.4261, 'ref_perplexity': 489.3264}, 'bertscore': {'precision': 85.4528, 'recall': 85.1171, 'f1': 85.2786}}

Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Round 3
Start Training!
Sample 486 of the training set: {'input_ids': [0, 2264, 222, 5, 333, 1067, 59, 5, 701, 797, 9, 5, 1152, 116, 47385, 50121, 50118, 33347, 4827, 35, 2085, 47, 64, 25522, 31375, 1536, 9834, 24303, 492, 10, 865, 7, 201, 142, 38, 38, 437, 45, 686, 549, 14, 14, 52, 64, 5731, 14, 13, 11971, 5122, 8, 14865, 3205, 479, 50121, 50118, 44518, 39322, 35, 25522, 31375, 1536, 9834, 24303, 407, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 10006, 16382, 35, 44258, 479, 50121, 50118, 33347, 4827, 35, 38, 437, 6661, 7, 33, 25522, 417, 32062, 6920, 254, 24303, 25522, 31375, 1536, 9834, 24303, 4337, 86, 38, 33, 7, 283, 159, 15, 42, 425, 456, 50121, 50118, 10006, 16382, 35, 44258, 479, 50121, 50118, 33347, 4827, 35, 7, 25522, 31375, 1536, 9834, 24303, 98, 42, 429, 28, 10, 410, 11361, 13, 110, 11140, 2156, 50121, 50118, 10006, 16382, 35, 44258, 479, 50121, 50118, 33347, 4827, 35, 53, 24, 18, 24, 18, 24, 18, 5, 588, 25522, 417, 32062, 6920, 254, 24303, 25522, 31375, 1536, 9834, 24303, 166, 33, 7, 1701, 24, 479, 208, 98, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 36926, 13700, 31275, 35, 8976, 479, 50121, 50118, 33347, 4827, 35, 109, 52, 206, 209, 2956, 25522, 31375, 1536, 9834, 24303, 41, 8, 127, 37463, 2292, 1901, 4972, 2156, 38, 1266, 2085, 24, 18, 678, 13, 13, 11971, 5122, 53, 172, 172, 24, 40, 28, 23, 701, 9, 97, 14749, 52, 429, 5731, 101, 5, 37463, 37463, 5, 5, 5, 31053, 37463, 25522, 31375, 1536, 9834, 24303, 37463, 403, 9, 5, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 10006, 16382, 35, 256, 119, 479, 44258, 479, 50121, 50118, 36926, 13700, 31275, 35, 256, 119, 12, 298, 5471, 11380, 101, 25522, 31375, 1536, 9834, 24303, 38, 74, 224, 14, 13, 8326, 37463, 10654, 2156, 47, 26, 2156, 37463, 24, 115, 28, 37463, 2773, 37463, 626, 624, 5, 5, 3737, 9, 11901, 523, 11971, 24630, 2156, 50121, 50118, 44518, 39322, 35, 8976, 479, 50121, 50118, 33347, 4827, 35, 256, 119, 479, 50121, 50118, 44518, 39322, 35, 8976, 479, 50121, 50118, 36926, 13700, 31275, 35, 53, 13, 5, 83, 1215, 104, 1215, 500, 1215, 467, 2156, 37463, 38, 437, 45, 686, 114, 24, 18, 21798, 7, 33, 42, 50121, 50118, 44518, 39322, 35, 166, 157, 52, 64, 202, 356, 23, 25522, 417, 32062, 6920, 254, 24303, 52, 64, 1067, 19, 5, 3895, 1933, 50121, 50118, 36926, 13700, 31275, 35, 166, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 44518, 39322, 35, 8, 47, 64, 37463, 1649, 141, 203, 141, 203, 51, 25522, 417, 32062, 6920, 254, 24303, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 36926, 13700, 31275, 35, 31804, 11380, 939, 114, 114, 24, 18, 10, 614, 32644, 24, 18, 416, 6264, 2156, 50121, 50118, 44518, 39322, 35, 11380, 11380, 50121, 50118, 10006, 16382, 35, 256, 119, 479, 50121, 50118, 44518, 39322, 35, 11380, 479, 50121, 50118, 36926, 13700, 31275, 35, 8, 885, 141, 203, 24, 18, 701, 2156, 2085, 19, 10, 856, 6162, 6638, 479, 50121, 50118, 44518, 39322, 35, 5359, 52, 64, 283, 25522, 31375, 1536, 9834, 24303, 52, 52, 64, 1067, 7, 106, 2156, 8, 52, 64, 283, 19, 14, 2156, 50121, 50118, 33347, 4827, 35, 256, 119, 15408, 479, 50121, 50118, 44518, 39322, 35, 47, 216, 479, 50121, 50118, 36926, 13700, 31275, 35, 8976, 479, 50121, 50118, 36926, 13700, 31275, 35, 407, 52, 33, 7, 216, 14, 5, 1920, 6148, 3441, 10, 2007, 6638, 2156, 53, 5, 25715, 5964, 37463, 8, 14, 761, 9, 723, 239, 12, 9406, 2682, 782, 55, 418, 7252, 61, 16, 10, 723, 425, 1186, 30103, 479, 178, 5, 2332, 3441, 41, 3319, 6638, 2156, 61, 11, 4072, 16, 55, 3214, 87, 5, 1675, 6638, 2156, 53, 25522, 31375, 1536, 9834, 24303, 38, 206, 37463, 19, 11971, 24630, 7252, 8, 114, 24, 18, 37463, 37463, 156, 13, 15408, 237, 153, 37463, 1964, 2156, 172, 38, 206, 885, 52, 115, 28, 441, 7, 3679, 14, 479, 50121, 50118, 33347, 4827, 35, 256, 119, 12, 298, 5471, 479, 50121, 50118, 36926, 13700, 31275, 35, 407, 7, 25522, 31375, 1536, 9834, 24303, 7, 6797, 62, 7252, 52, 240, 25522, 31375, 1536, 9834, 24303, 11380, 98, 38, 38, 95, 26, 14, 5, 6411, 37463, 5, 889, 9, 6411, 37463, 34, 7, 28, 37463, 11380, 3147, 8, 7252, 8, 7252, 6559, 16, 10, 41, 505, 609, 14, 34, 7, 28, 551, 88, 1316, 479, 178, 37463, 13, 5, 15293, 9, 5, 38676, 37463, 37463, 1719, 18472, 172, 24, 18, 357, 7, 7, 7, 2085, 192, 14, 19, 37463, 5, 5, 121, 1215, 500, 1215, 4553, 121, 1215, 500, 1215, 100, 1215, 26721, 50121, 50118, 44518, 39322, 35, 19719, 479, 50121, 50118, 10006, 16382, 35, 256, 119, 479, 50121, 50118, 36926, 13700, 31275, 35, 98, 14, 52, 64, 25522, 417, 32062, 6920, 254, 24303, 24, 18, 269, 10, 165, 12, 10733, 37463, 479, 407, 50121, 50118, 33347, 4827, 35, 256, 119, 479, 50121, 50118, 36926, 13700, 31275, 35, 38, 38, 1395, 1521, 402, 396, 110, 1288, 2156, 50121, 50118, 33347, 4827, 35, 440, 9, 768, 479, 50121, 50118, 44518, 39322, 35, 8976, 98, 50121, 50118, 36926, 13700, 31275, 35, 235, 17487, 50121, 50118, 44518, 39322, 35, 9, 768, 13, 1246, 37463, 38, 770, 7, 216, 101, 114, 47, 236, 7, 33, 10, 10, 9565, 114, 47, 236, 7, 33, 5, 226, 1215, 347, 1215, 495, 1215, 2332, 81, 89, 2156, 50121, 50118, 36926, 13700, 31275, 35, 3216, 479, 50121, 50118, 44518, 39322, 35, 50, 114, 47, 236, 7, 1400, 10, 8864, 19, 10, 10654, 25522, 417, 32062, 6920, 254, 24303, 653, 761, 9, 383, 47, 581, 240, 1025, 110, 7174, 1025, 25522, 417, 32062, 6920, 254, 24303, 305, 8401, 99, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 36926, 13700, 31275, 35, 8976, 24, 18, 761, 9, 7252, 2007, 25522, 29183, 24303, 1759, 17618, 763, 586, 35128, 2187, 2156, 8, 52, 33, 7, 27545, 479, 50121, 50118, 44518, 39322, 35, 305, 99, 25522, 417, 32062, 6920, 254, 24303, 8487, 479, 8487, 479, 50121, 50118, 36926, 13700, 31275, 35, 38, 206, 52, 115, 27545, 65, 14, 115, 223, 11527, 484, 8047, 50121, 50118, 44518, 39322, 35, 8487, 98, 50121, 50118, 36926, 13700, 31275, 35, 9, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 44518, 39322, 35, 11, 14, 403, 47, 64, 190, 356, 23, 5, 806, 99, 5, 1830, 1028, 16, 667, 7, 304, 19, 5, 25522, 29183, 24303, 1886, 479, 50121, 50118, 36926, 13700, 31275, 35, 31804, 11380, 2156, 13, 6777, 2787, 8, 11380, 479, 50121, 50118, 44518, 39322, 35, 8976, 147, 51, 109, 70, 5, 33755, 19, 19, 106, 888, 479, 1336, 856, 701, 2375, 24, 74, 28, 7, 342, 14, 512, 6638, 88, 24, 8, 109, 5, 586, 35128, 383, 479, 50121, 50118, 36926, 13700, 31275, 35, 8487, 479, 50121, 50118, 33347, 4827, 35, 407, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 36926, 13700, 31275, 35, 8976, 479, 8976, 205, 1114, 479, 50121, 50118, 44518, 39322, 35, 2647, 38, 218, 75, 216, 114, 24, 581, 2564, 88, 84, 701, 9, 11971, 477, 292, 5122, 47, 216, 479, 50121, 50118, 33347, 4827, 35, 23129, 25522, 417, 32062, 6920, 254, 24303, 370, 3553, 47, 206, 24, 18, 678, 479, 50121, 50118, 44518, 39322, 35, 1534, 24, 678, 7, 2564, 11, 7, 14, 17487, 50121, 50118, 36926, 13700, 31275, 35, 8976, 67, 2053, 2156, 38, 206, 258, 37463, 25522, 417, 32062, 6920, 254, 24303, 114, 52, 56, 10, 1229, 9, 10328, 10328, 37463, 24630, 2156, 24, 40, 28, 8578, 2156, 50121, 50118, 44518, 39322, 35, 19719, 479, 50121, 50118, 33347, 4827, 35, 44258, 479, 50121, 50118, 36926, 13700, 31275, 35, 53, 37463, 25522, 417, 32062, 6920, 254, 24303, 25522, 29183, 24303, 479, 50121, 50118, 10006, 16382, 35, 2647, 2085, 52, 240, 2167, 701, 1033, 172, 479, 18894, 109, 2085, 80, 7191, 8, 172, 701, 106, 66, 8, 192, 61, 65, 16, 6908, 2564, 11, 84, 1229, 357, 479, 50121, 50118, 33347, 4827, 35, 256, 119, 4420, 50121, 50118, 36926, 13700, 31275, 35, 8976, 14, 18, 41, 4206, 1114, 479, 50121, 50118, 33347, 4827, 35, 8401, 77, 47, 146, 10, 25522, 31375, 1536, 9834, 24303, 10, 1521, 6056, 47, 64, 25522, 31375, 1536, 9834, 24303, 25522, 417, 32062, 6920, 254, 24303, 220, 529, 47, 64, 492, 41, 1341, 41, 6089, 701, 425, 479, 50121, 50118, 36926, 13700, 31275, 35, 8976, 11380, 479, 8976, 50121, 50118, 10006, 16382, 35, 256, 119, 479, 50121, 50118, 33347, 4827, 35, 280, 885, 14, 74, 28, 10, 182, 205, 1114, 479, 50121, 50118, 36926, 13700, 31275, 35, 142, 235, 122, 38, 218, 75, 33, 25522, 29183, 24303, 425, 11, 11, 471, 50121, 50118, 33347, 4827, 35, 256, 119, 479, 50121, 50118, 36926, 13700, 31275, 35, 53, 13, 220, 529, 38, 437, 686, 11380, 28, 441, 7, 109, 14, 479, 50121, 50118, 33347, 4827, 35, 2497, 205, 479, 2], 'attention_masklabels': [0, 133, 695, 1044, 12267, 549, 51, 115, 5731, 5, 1521, 13, 11971, 5122, 8, 14865, 3205, 4, 1892, 5, 2683, 6004, 6849, 14, 5, 5043, 9, 8326, 5, 10654, 21, 4555, 150, 5, 20140, 9, 5, 6015, 500, 467, 21, 9684, 4, 9068, 6, 2085, 51, 197, 146, 103, 7932, 4, 3347, 6, 5, 2683, 6004, 8, 5, 3018, 12332, 6004, 58, 1552, 7, 694, 80, 7191, 19, 5, 6089, 701, 425, 23, 5, 220, 529, 98, 14, 51, 115, 192, 61, 65, 2564, 49, 1229, 357, 4, 2]}.
***** Running training *****
  Num examples = 986
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9860
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 18.4966, 'rouge2': 1.5263, 'rougeL': 15.0577, 'rougeLsum': 16.2255}, 'ppl': {'perplexity': 143.2093, 'ref_perplexity': 637.0957}, 'bertscore': {'precision': 74.9019, 'recall': 79.4929, 'f1': 77.1171}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 16.2796, 'rouge2': 5.3796, 'rougeL': 13.5528, 'rougeLsum': 14.8576}, 'ppl': {'perplexity': 35.3589, 'ref_perplexity': 259.6869}, 'bertscore': {'precision': 86.1226, 'recall': 83.452, 'f1': 84.7539}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 21.8037, 'rouge2': 6.9469, 'rougeL': 17.1538, 'rougeLsum': 19.5738}, 'ppl': {'perplexity': 26.2688, 'ref_perplexity': 182.7587}, 'bertscore': {'precision': 87.6482, 'recall': 83.8808, 'f1': 85.7137}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.8865, 'rouge2': 8.0426, 'rougeL': 18.6536, 'rougeLsum': 24.1271}, 'ppl': {'perplexity': 48.2274, 'ref_perplexity': 160.177}, 'bertscore': {'precision': 84.7277, 'recall': 83.9038, 'f1': 84.3068}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.5266, 'rouge2': 7.615, 'rougeL': 17.7649, 'rougeLsum': 21.8696}, 'ppl': {'perplexity': 21.5253, 'ref_perplexity': 152.0113}, 'bertscore': {'precision': 87.1996, 'recall': 84.6574, 'f1': 85.902}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.8588, 'rouge2': 7.308, 'rougeL': 18.2119, 'rougeLsum': 22.1673}, 'ppl': {'perplexity': 44.0997, 'ref_perplexity': 154.594}, 'bertscore': {'precision': 86.9103, 'recall': 84.5998, 'f1': 85.7334}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.4471, 'rouge2': 7.3435, 'rougeL': 18.5239, 'rougeLsum': 23.369}, 'ppl': {'perplexity': 39.5544, 'ref_perplexity': 159.5511}, 'bertscore': {'precision': 86.2939, 'recall': 84.7272, 'f1': 85.4985}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.2718, 'rouge2': 7.663, 'rougeL': 18.7341, 'rougeLsum': 23.8412}, 'ppl': {'perplexity': 20.6526, 'ref_perplexity': 174.8475}, 'bertscore': {'precision': 85.8689, 'recall': 84.6721, 'f1': 85.2617}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.606, 'rouge2': 7.1553, 'rougeL': 18.7236, 'rougeLsum': 23.8441}, 'ppl': {'perplexity': 28.3922, 'ref_perplexity': 191.9121}, 'bertscore': {'precision': 86.9448, 'recall': 85.061, 'f1': 85.9877}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.3892, 'rouge2': 6.8114, 'rougeL': 17.752, 'rougeLsum': 22.2713}, 'ppl': {'perplexity': 44.1276, 'ref_perplexity': 220.2042}, 'bertscore': {'precision': 86.0579, 'recall': 84.7143, 'f1': 85.3755}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.6762, 'rouge2': 7.7507, 'rougeL': 18.2702, 'rougeLsum': 23.8773}, 'ppl': {'perplexity': 24.3526, 'ref_perplexity': 244.0205}, 'bertscore': {'precision': 86.4899, 'recall': 85.0602, 'f1': 85.762}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.7632, 'rouge2': 6.9691, 'rougeL': 18.2282, 'rougeLsum': 23.7648}, 'ppl': {'perplexity': 42.1183, 'ref_perplexity': 274.2215}, 'bertscore': {'precision': 85.7182, 'recall': 85.0379, 'f1': 85.3706}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 28.0755, 'rouge2': 7.2489, 'rougeL': 18.402, 'rougeLsum': 24.2741}, 'ppl': {'perplexity': 34.7925, 'ref_perplexity': 309.535}, 'bertscore': {'precision': 85.8884, 'recall': 85.1026, 'f1': 85.4885}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 28.5339, 'rouge2': 6.8662, 'rougeL': 18.5974, 'rougeLsum': 24.6465}, 'ppl': {'perplexity': 51.2102, 'ref_perplexity': 341.5422}, 'bertscore': {'precision': 86.0603, 'recall': 85.1695, 'f1': 85.607}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.621, 'rouge2': 6.8146, 'rougeL': 18.6028, 'rougeLsum': 23.5333}, 'ppl': {'perplexity': 55.5138, 'ref_perplexity': 369.9985}, 'bertscore': {'precision': 86.2128, 'recall': 85.2436, 'f1': 85.7194}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 28.5963, 'rouge2': 6.851, 'rougeL': 18.5974, 'rougeLsum': 24.7908}, 'ppl': {'perplexity': 38.7644, 'ref_perplexity': 393.3787}, 'bertscore': {'precision': 85.8779, 'recall': 85.188, 'f1': 85.5261}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.0826, 'rouge2': 6.6608, 'rougeL': 18.3103, 'rougeLsum': 23.5382}, 'ppl': {'perplexity': 49.8019, 'ref_perplexity': 419.5855}, 'bertscore': {'precision': 86.1186, 'recall': 85.2445, 'f1': 85.6737}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 29.0625, 'rouge2': 7.2556, 'rougeL': 18.6696, 'rougeLsum': 25.1136}, 'ppl': {'perplexity': 22.9111, 'ref_perplexity': 445.4415}, 'bertscore': {'precision': 85.9023, 'recall': 85.2366, 'f1': 85.5626}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.9062, 'rouge2': 6.9695, 'rougeL': 18.1262, 'rougeLsum': 24.1539}, 'ppl': {'perplexity': 37.9634, 'ref_perplexity': 452.9352}, 'bertscore': {'precision': 85.9753, 'recall': 85.2292, 'f1': 85.5934}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.8915, 'rouge2': 6.6258, 'rougeL': 18.0434, 'rougeLsum': 23.759}, 'ppl': {'perplexity': 24.4962, 'ref_perplexity': 460.1989}, 'bertscore': {'precision': 85.7644, 'recall': 85.23, 'f1': 85.4905}}

Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Round 4
Start Training!
Sample 699 of the training set: {'input_ids': [0, 2264, 222, 447, 19, 400, 1247, 888, 1266, 116, 47385, 50121, 50118, 530, 17698, 219, 1604, 3326, 35, 3216, 6, 3668, 4, 407, 6, 38, 437, 2818, 7, 146, 41, 2443, 3859, 6, 114, 45, 423, 15, 42, 186, 6, 59, 103, 2167, 1254, 198, 323, 13, 6554, 8, 10335, 4, 166, 214, 447, 3615, 19, 400, 1247, 7, 1346, 95, 14, 35, 7, 1346, 31, 5, 1304, 5, 346, 9, 1304, 14, 578, 463, 10, 346, 9, 106, 33, 416, 626, 42, 578, 11990, 57, 6946, 27202, 29, 6, 29265, 8, 15962, 7, 408, 6, 8, 67, 9397, 408, 54, 32, 45, 2532, 7580, 11, 5, 1713, 14, 33, 57, 156, 577, 4, 178, 52, 581, 28, 608, 80, 383, 7, 323, 400, 1247, 4, 20, 78, 16, 7, 304, 5, 388, 9, 2104, 14, 51, 416, 33, 7, 28, 441, 7, 694, 6554, 7, 521, 4, 407, 6, 52, 33, 3584, 15, 10, 632, 1453, 2257, 14, 6, 77, 5049, 7, 41, 793, 2125, 9, 10549, 6, 5700, 4072, 24, 88, 41, 66, 12, 1116, 12, 627, 12, 8304, 27202, 4, 3047, 6, 25, 47, 64, 4744, 6, 95, 101, 97, 383, 148, 10, 23387, 14414, 6, 89, 34, 57, 10, 6187, 7, 907, 92, 2682, 15, 5, 210, 8, 172, 89, 16, 10, 21977, 8, 5907, 64, 120, 99, 51, 240, 4, 407, 6, 52, 214, 14258, 354, 2590, 10549, 14, 16, 416, 577, 11, 1304, 8, 400, 1247, 6, 8, 52, 40, 356, 7, 124, 29238, 14, 7, 1304, 23, 10, 423, 477, 66, 9, 84, 2344, 14396, 915, 3020, 4, 20, 97, 696, 16, 6, 683, 10, 920, 34, 10, 27202, 50, 10, 9972, 50, 10, 2187, 6, 743, 198, 10335, 4, 407, 6, 52, 214, 67, 546, 7, 2229, 15, 10, 632, 672, 8, 12983, 9109, 12, 9474, 10335, 6, 98, 521, 40, 28, 441, 7, 33, 899, 7, 9276, 12, 9474, 147, 51, 218, 75, 33, 14, 416, 4, 280, 18, 596, 52, 240, 7, 173, 3615, 19, 400, 1247, 8, 1304, 7, 3058, 5, 672, 9, 14, 240, 8, 7, 146, 686, 5, 2682, 1516, 7, 5, 235, 408, 4, 509, 9, 5, 1319, 11, 61, 52, 32, 441, 7, 109, 14, 16, 7, 356, 23, 4921, 11, 1265, 4, 407, 6, 114, 10, 920, 2282, 75, 57, 7580, 6, 16, 14, 142, 51, 95, 218, 75, 236, 7, 8, 51, 214, 3434, 19, 49, 1730, 578, 4297, 2563, 2948, 240, 7, 33, 10, 1607, 59, 14, 578, 368, 16, 14, 142, 5, 920, 1622, 473, 45, 33, 5, 1460, 7, 109, 14, 6, 8, 3891, 52, 240, 7, 120, 14, 2682, 66, 7, 167, 408, 116, 407, 6, 1195, 87, 95, 1622, 1618, 24, 7, 400, 1247, 7, 21977, 198, 11, 10, 182, 11138, 210, 7, 120, 5, 2682, 14, 51, 40, 240, 6, 52, 214, 667, 7, 109, 14, 15, 10, 632, 1453, 8, 11386, 14, 7, 400, 1247, 4, 407, 6, 84, 503, 33, 57, 519, 5475, 19, 349, 9, 84, 400, 1247, 7, 29477, 99, 18, 416, 1102, 6, 8, 89, 16, 182, 205, 1524, 66, 89, 578, 8813, 29, 33, 57, 16300, 578, 4297, 147, 89, 32, 10778, 6, 99, 64, 52, 109, 25, 10, 632, 1621, 7, 28, 441, 7, 3991, 106, 7, 109, 14, 116, 166, 32, 2851, 710, 29105, 103, 9, 5, 1915, 14, 52, 56, 1433, 2006, 13, 84, 2344, 14396, 915, 6, 634, 167, 1915, 7, 3300, 42, 1989, 4044, 4, 50121, 50118, 20689, 5144, 12051, 3326, 35, 3837, 47, 4, 2], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'labels': [0, 530, 17698, 219, 1604, 3326, 1373, 14, 5, 168, 58, 447, 3615, 19, 400, 1247, 7, 1346, 99, 334, 56, 416, 626, 6, 13, 4327, 6946, 27202, 29, 6, 29265, 8, 15962, 7, 408, 4, 7101, 197, 146, 686, 14, 521, 108, 899, 7, 595, 1265, 8117, 58, 577, 7, 70, 4, 8705, 6, 5807, 2229, 9, 1778, 2239, 3270, 6, 5, 168, 21, 67, 546, 7, 2229, 8, 12983, 9109, 12, 9474, 10335, 15, 10, 632, 672, 4, 1426, 53, 45, 513, 6, 5, 168, 8, 400, 1247, 58, 561, 3348, 7, 3058, 1265, 4044, 8, 1276, 7, 2851, 710, 21519, 103, 9, 5, 1915, 61, 56, 57, 1433, 2006, 13, 5, 2344, 14396, 915, 6, 634, 167, 1915, 7, 3300, 42, 1989, 4044, 4, 2]}.
***** Running training *****
  Num examples = 986
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9860
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 18.4734, 'rouge2': 1.6539, 'rougeL': 15.2057, 'rougeLsum': 17.585}, 'ppl': {'perplexity': 233.6275, 'ref_perplexity': 596.985}, 'bertscore': {'precision': 76.1973, 'recall': 79.4805, 'f1': 77.7975}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 18.4862, 'rouge2': 5.4532, 'rougeL': 13.8904, 'rougeLsum': 16.4451}, 'ppl': {'perplexity': 83.1382, 'ref_perplexity': 246.5079}, 'bertscore': {'precision': 88.0413, 'recall': 83.948, 'f1': 85.9389}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 18.4459, 'rouge2': 6.2922, 'rougeL': 15.1391, 'rougeLsum': 17.2004}, 'ppl': {'perplexity': 10.9959, 'ref_perplexity': 172.6846}, 'bertscore': {'precision': 88.7722, 'recall': 84.1896, 'f1': 86.4124}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.1188, 'rouge2': 7.5414, 'rougeL': 18.6833, 'rougeLsum': 22.4009}, 'ppl': {'perplexity': 22.6652, 'ref_perplexity': 152.3897}, 'bertscore': {'precision': 87.1822, 'recall': 84.4216, 'f1': 85.7744}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.3728, 'rouge2': 8.5789, 'rougeL': 19.7357, 'rougeLsum': 25.4999}, 'ppl': {'perplexity': 19.5823, 'ref_perplexity': 145.4285}, 'bertscore': {'precision': 86.2841, 'recall': 84.5254, 'f1': 85.3904}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.5298, 'rouge2': 8.1172, 'rougeL': 18.4529, 'rougeLsum': 23.0229}, 'ppl': {'perplexity': 80.7803, 'ref_perplexity': 141.9646}, 'bertscore': {'precision': 86.6647, 'recall': 84.59, 'f1': 85.6056}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.4181, 'rouge2': 8.1728, 'rougeL': 19.0614, 'rougeLsum': 24.7564}, 'ppl': {'perplexity': 66.0587, 'ref_perplexity': 149.6177}, 'bertscore': {'precision': 87.0454, 'recall': 84.9631, 'f1': 85.9857}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.5983, 'rouge2': 7.4746, 'rougeL': 19.1391, 'rougeLsum': 25.111}, 'ppl': {'perplexity': 27.7955, 'ref_perplexity': 167.8231}, 'bertscore': {'precision': 86.6469, 'recall': 84.8173, 'f1': 85.7155}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.4517, 'rouge2': 7.7764, 'rougeL': 19.1662, 'rougeLsum': 24.3288}, 'ppl': {'perplexity': 37.7295, 'ref_perplexity': 184.3214}, 'bertscore': {'precision': 86.3707, 'recall': 84.8857, 'f1': 85.6148}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.2765, 'rouge2': 7.2182, 'rougeL': 17.9536, 'rougeLsum': 23.5737}, 'ppl': {'perplexity': 42.1005, 'ref_perplexity': 208.2072}, 'bertscore': {'precision': 86.4471, 'recall': 84.938, 'f1': 85.6788}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.7733, 'rouge2': 6.7274, 'rougeL': 18.4613, 'rougeLsum': 24.9014}, 'ppl': {'perplexity': 49.5919, 'ref_perplexity': 232.0233}, 'bertscore': {'precision': 86.41, 'recall': 85.0787, 'f1': 85.7343}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.3513, 'rouge2': 6.5769, 'rougeL': 18.5228, 'rougeLsum': 24.271}, 'ppl': {'perplexity': 48.7365, 'ref_perplexity': 262.3352}, 'bertscore': {'precision': 86.2536, 'recall': 84.975, 'f1': 85.6041}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.6249, 'rouge2': 6.5703, 'rougeL': 17.6298, 'rougeLsum': 23.862}, 'ppl': {'perplexity': 28.7558, 'ref_perplexity': 291.3528}, 'bertscore': {'precision': 86.2518, 'recall': 85.1195, 'f1': 85.6756}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.9648, 'rouge2': 5.3029, 'rougeL': 16.3431, 'rougeLsum': 21.9904}, 'ppl': {'perplexity': 35.1829, 'ref_perplexity': 321.2975}, 'bertscore': {'precision': 85.9505, 'recall': 85.0263, 'f1': 85.4809}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.2858, 'rouge2': 6.6073, 'rougeL': 18.2757, 'rougeLsum': 24.3195}, 'ppl': {'perplexity': 62.3398, 'ref_perplexity': 359.8455}, 'bertscore': {'precision': 85.9588, 'recall': 85.1671, 'f1': 85.5559}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.3333, 'rouge2': 6.3109, 'rougeL': 17.8523, 'rougeLsum': 23.8924}, 'ppl': {'perplexity': 36.3145, 'ref_perplexity': 382.461}, 'bertscore': {'precision': 86.1759, 'recall': 85.3177, 'f1': 85.7382}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.6265, 'rouge2': 6.5011, 'rougeL': 17.6979, 'rougeLsum': 23.9807}, 'ppl': {'perplexity': 27.0147, 'ref_perplexity': 396.7636}, 'bertscore': {'precision': 86.1639, 'recall': 85.3117, 'f1': 85.7302}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.7483, 'rouge2': 6.6433, 'rougeL': 17.6525, 'rougeLsum': 23.8157}, 'ppl': {'perplexity': 51.0047, 'ref_perplexity': 411.7148}, 'bertscore': {'precision': 85.9503, 'recall': 85.1683, 'f1': 85.5513}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.1044, 'rouge2': 5.9842, 'rougeL': 17.4375, 'rougeLsum': 23.0905}, 'ppl': {'perplexity': 28.0332, 'ref_perplexity': 431.9445}, 'bertscore': {'precision': 85.9754, 'recall': 85.1483, 'f1': 85.554}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.3037, 'rouge2': 6.4436, 'rougeL': 17.4994, 'rougeLsum': 23.7887}, 'ppl': {'perplexity': 18.9202, 'ref_perplexity': 430.9986}, 'bertscore': {'precision': 85.984, 'recall': 85.2004, 'f1': 85.5855}}

Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Round 5
Start Training!
Sample 567 of the training set: {'input_ids': [0, 2264, 222, 5, 529, 2268, 59, 5, 1683, 9, 5, 12093, 741, 7904, 2331, 2407, 877, 15, 6012, 1265, 7668, 116, 47385, 50121, 50118, 34052, 858, 3864, 21851, 3326, 35, 8487, 6, 3392, 47, 4, 20, 220, 1142, 32, 31, 11239, 22171, 12, 104, 47594, 4, 50121, 50118, 14273, 594, 22171, 12, 104, 47594, 3326, 35, 152, 16, 59, 5, 6012, 913, 9, 7739, 5, 12093, 741, 1043, 50141, 261, 97, 12522, 9352, 8, 1265, 6397, 6, 8, 52, 348, 56, 30464, 11, 14, 24, 16, 3735, 103, 1379, 4, 407, 6, 109, 47, 33, 143, 1379, 59, 5, 1683, 14, 5, 12093, 741, 1043, 50141, 12488, 28, 519, 15, 6012, 1265, 7668, 6, 215, 25, 5, 29360, 9, 5, 12522, 23, 762, 1289, 204, 116, 50121, 50118, 530, 17698, 219, 1604, 3326, 35, 440, 4, 11105, 6, 1304, 32, 2149, 13, 1884, 49, 400, 12522, 904, 6, 8, 14, 782, 7, 972, 5, 782, 9, 49, 25929, 6, 8, 24, 67, 782, 7, 972, 5, 782, 9, 5, 13807, 8, 25855, 36, 771, 4575, 43, 22328, 2338, 4, 407, 6, 89, 197, 28, 10, 1810, 3143, 9, 5717, 577, 4, 38, 679, 14, 5, 2417, 1539, 10921, 888, 473, 1306, 14, 89, 16, 10, 4007, 12522, 8, 14, 408, 32, 4924, 7, 430, 2239, 1616, 4, 178, 98, 6, 1195, 87, 29360, 24, 6, 38, 679, 5, 12093, 741, 1043, 50141, 44590, 201, 7, 146, 686, 14, 89, 16, 41, 21734, 12522, 6, 8, 14, 3739, 9, 430, 743, 32, 16217, 11, 5, 2417, 1539, 10921, 14, 1306, 45, 95, 5286, 2417, 32, 2226, 6, 53, 6, 888, 6, 2655, 8, 2417, 9, 10, 6012, 1186, 9, 9352, 59, 47, 8, 110, 317, 11, 5, 232, 16, 577, 1241, 42, 15496, 4, 50121, 50118, 14273, 594, 22171, 12, 104, 47594, 3326, 35, 8487, 6, 2446, 4, 178, 172, 6, 7, 99, 5239, 109, 47, 206, 14, 5, 12093, 741, 1043, 50141, 17276, 28, 492, 3887, 81, 97, 12522, 9352, 116, 50121, 50118, 530, 17698, 219, 1604, 3326, 35, 2647, 6, 38, 218, 75, 206, 24, 18, 578, 4, 85, 4395, 75, 28, 23, 5, 5623, 9, 97, 9352, 4, 85, 197, 28, 233, 9, 14, 1810, 1186, 9, 1616, 14, 32, 24528, 7, 521, 6, 8, 38, 218, 75, 206, 24, 18, 55, 505, 50141, 368, 540, 505, 87, 50141, 7443, 5894, 9, 99, 52, 416, 1394, 1304, 7, 2438, 4, 50121, 50118, 14273, 594, 22171, 12, 104, 47594, 3326, 35, 653, 59, 147, 52, 348, 551, 30464, 14, 89, 18, 10, 1762, 9, 2148, 11, 1110, 9, 70, 5, 1823, 9985, 9, 7739, 5, 12093, 741, 1043, 552, 19, 97, 18952, 116, 38, 439, 7, 10, 334, 11, 11421, 368, 6, 8, 6, 456, 6, 25, 34, 57, 26, 259, 6, 24, 18, 182, 13744, 1720, 6, 5, 1283, 14, 52, 214, 602, 578, 40053, 103, 33, 303, 24, 182, 1365, 50, 103, 6, 217, 2948, 6, 33, 303, 24, 2778, 1202, 7, 2564, 960, 11, 6, 8, 51, 109, 679, 14, 89, 16, 10, 1762, 9, 2148, 89, 4, 50121, 50118, 530, 17698, 219, 1604, 3326, 35, 178, 5, 15, 33961, 2574, 8, 5, 4914, 9, 16942, 13, 2948, 16, 5055, 30, 5, 13559, 14868, 5295, 173, 8, 1551, 88, 5, 15496, 6, 8, 14, 16, 65, 9, 5, 383, 14, 52, 214, 546, 7, 1100, 98, 14, 5, 4990, 7863, 8, 16942, 8819, 13, 2948, 32, 45, 350, 15, 33961, 4, 178, 6, 114, 89, 16, 143, 7510, 9, 41988, 578, 26302, 4189, 145, 553, 7, 109, 383, 81, 8, 81, 578, 13040, 14, 782, 7, 28, 4873, 25, 157, 6, 8, 14, 18, 596, 89, 16, 42, 1551, 30, 5, 1521, 333, 4, 50121, 50118, 14273, 594, 22171, 12, 104, 47594, 3326, 35, 8487, 6, 2446, 4, 178, 172, 6, 141, 109, 47, 2519, 7, 1379, 14, 25929, 32, 11473, 7739, 5, 12093, 741, 1043, 578, 147, 51, 64, 6, 14, 16, 578, 1409, 50141, 2611, 4345, 3353, 11, 1156, 50, 3353, 14, 109, 45, 904, 12093, 12, 37661, 6397, 116, 50121, 50118, 530, 17698, 219, 1604, 3326, 35, 2647, 6, 24, 18, 2679, 6, 965, 75, 24, 6, 59, 147, 408, 2807, 7, 892, 8, 549, 51, 32, 7958, 30, 5, 29751, 9, 5, 12093, 741, 1043, 116, 1806, 146, 2390, 59, 147, 7, 892, 13, 10, 1086, 1482, 9, 2188, 6, 8, 24, 18, 1202, 2128, 7, 30127, 99, 167, 32, 4, 407, 6, 13, 4327, 6, 52, 747, 1798, 42, 552, 5, 1424, 14, 6, 142, 578, 4, 20, 18947, 16, 45, 1365, 6, 53, 24, 64, 28, 3487, 1365, 7, 213, 420, 88, 5, 2370, 467, 8, 3891, 47, 218, 75, 33, 7, 109, 42, 4, 978, 6, 5, 2188, 13, 14, 115, 28, 182, 15594, 4, 85, 115, 28, 59, 5, 2574, 9, 5, 904, 4, 166, 216, 14, 6, 11, 103, 9, 84, 3826, 1304, 6, 5, 5929, 2958, 4620, 2025, 75, 441, 7, 904, 10, 1810, 3143, 9, 83, 12, 44280, 6, 8, 2532, 6, 30, 164, 7, 10, 430, 6786, 6, 10, 2514, 6786, 420, 5, 169, 6, 172, 47, 64, 120, 14, 4069, 9, 5, 83, 12, 44280, 47, 236, 7, 109, 6, 61, 1622, 965, 75, 678, 114, 47, 109, 24, 11, 110, 184, 334, 4, 1793, 6, 52, 109, 33, 103, 7407, 2723, 493, 7863, 147, 83, 12, 44280, 32, 2781, 420, 10, 1810, 3143, 9, 1304, 6, 61, 2703, 521, 7, 1504, 4, 993, 521, 218, 75, 236, 7, 109, 14, 131, 51, 218, 75, 236, 7, 109, 49, 83, 12, 44280, 11, 130, 430, 1304, 6, 53, 51, 1017, 1195, 213, 7, 41, 6786, 147, 51, 64, 109, 24, 70, 223, 65, 5645, 4, 178, 14, 839, 6, 2128, 6, 1375, 420, 5, 1424, 50, 6, 11, 5, 443, 38, 697, 6, 408, 442, 5, 568, 7, 213, 7, 4213, 212, 4503, 1564, 6, 142, 63, 10, 9869, 6, 2721, 92, 745, 6, 5, 2644, 32, 3668, 5500, 8, 10, 1810, 3143, 9, 83, 12, 44280, 16, 577, 223, 65, 5645, 4, 166, 1415, 23, 6, 11, 1989, 6, 67, 6, 5, 10518, 9, 1318, 4, 407, 6, 114, 52, 185, 5, 1246, 9, 1745, 4858, 35959, 835, 11, 83, 2865, 10570, 2855, 6, 10, 334, 147, 6, 11, 5, 375, 6, 89, 33, 57, 6, 38, 206, 6, 624, 5, 435, 6, 103, 1379, 59, 5, 1318, 9, 14, 334, 578, 29676, 24, 18, 11394, 25, 10, 205, 334, 4, 178, 6, 31, 14, 1989, 2259, 6, 47, 64, 1341, 2773, 120, 7, 1398, 1891, 1564, 578, 102, 1564, 14, 34, 10, 5500, 904, 6, 473, 182, 6, 182, 157, 8, 34, 10, 2721, 745, 4, 653, 52, 109, 6, 114, 52, 356, 23, 5, 6779, 9, 5, 521, 54, 33, 57, 12544, 11, 1745, 4858, 35959, 6, 25, 14, 334, 34, 57, 15, 63, 3855, 3251, 8, 34, 626, 357, 8, 357, 8, 357, 6, 5, 346, 9, 521, 14, 51, 32, 17784, 88, 49, 2958, 1026, 34, 3831, 4, 407, 6, 5, 10518, 16, 6, 128, 713, 16, 10, 205, 334, 6, 38, 437, 164, 7, 120, 10, 205, 12, 8634, 676, 259, 3934, 8, 55, 8, 55, 521, 32, 8348, 7, 1095, 11, 14, 334, 87, 2532, 146, 5, 568, 7, 1504, 6152, 1493, 4, 166, 67, 33, 7, 11865, 14, 6, 13, 103, 521, 6, 4959, 11, 5, 2958, 1026, 965, 75, 99, 51, 236, 7, 109, 131, 51, 236, 10, 430, 676, 6, 51, 236, 7, 213, 7, 41, 16852, 1564, 4, 252, 236, 10, 430, 676, 4, 407, 6, 52, 33, 7, 185, 88, 6077, 14, 521, 115, 28, 7958, 30, 10, 1810, 3143, 9, 9352, 6, 8, 89, 18, 117, 543, 12, 463, 12, 16963, 1283, 14, 24, 16, 29751, 9, 5, 741, 1043, 50141, 6025, 16, 5, 6922, 1393, 13, 103, 9, 209, 5717, 4, 50121, 50118, 34052, 858, 3864, 21851, 3326, 35, 11065, 3695, 282, 6, 15, 42, 4, 50121, 50118, 104, 811, 272, 11760, 890, 811, 3326, 35, 20, 1283, 14, 52, 348, 56, 31, 65, 9, 5, 5307, 7811, 578, 17569, 4193, 8, 699, 1283, 578, 354, 14, 42, 16, 2909, 6, 14, 16, 6, 14, 664, 82, 32, 1618, 5295, 7, 213, 81, 5, 1424, 7, 1304, 11, 1156, 11, 645, 7, 1877, 5, 12093, 741, 1043, 4, 280, 18, 2230, 99, 21, 26, 7, 201, 4, 125, 47, 218, 75, 3264, 14, 1283, 4, 50121, 50118, 530, 17698, 219, 1604, 3326, 35, 38, 437, 45, 584, 14, 38, 218, 75, 3264, 24, 4, 38, 437, 584, 14, 38, 206, 50141, 8585, 32, 10, 1810, 3143, 9, 2188, 50141, 25800, 521, 146, 2390, 59, 147, 7, 892, 4, 38, 437, 45, 2542, 9, 143, 5145, 2125, 9, 173, 14, 34, 1415, 23, 167, 30337, 6, 8, 38, 206, 89, 115, 28, 10, 1086, 1482, 9, 2188, 596, 408, 32, 8997, 7, 517, 420, 5, 1424, 4, 6259, 5, 12093, 741, 1043, 16, 41, 1365, 65, 7, 317, 14, 9337, 15, 6, 8, 14, 18, 3013, 7, 9630, 6, 965, 75, 24, 6, 87, 584, 14, 2532, 521, 32, 442, 14, 2031, 13, 97, 2188, 4, 50121, 50118, 34052, 858, 3864, 21851, 3326, 35, 8487, 6, 3392, 47, 4, 20, 220, 1142, 6, 172, 6, 32, 15, 3254, 2239, 31, 3296, 5144, 4, 50121, 50118, 20689, 5144, 12051, 3326, 35, 18894, 6, 38, 348, 553, 5, 864, 14, 38, 770, 7, 1394, 4, 50121, 50118, 34052, 858, 3864, 21851, 3326, 35, 8487, 6, 47, 218, 75, 236, 7, 578, 50121, 50118, 20689, 5144, 12051, 3326, 35, 870, 70, 839, 47, 1394, 5, 643, 38, 56, 4, 50121, 50118, 34052, 858, 3864, 21851, 3326, 35, 8487, 4, 370, 33, 4997, 7, 1058, 416, 4, 20, 1540, 18, 300, 80, 1379, 6, 269, 4, 509, 16, 59, 2460, 1825, 11, 3779, 717, 7, 6396, 5, 12093, 741, 1043, 6, 98, 38, 218, 75, 216, 114, 47, 236, 7, 3003, 15, 141, 2948, 32, 145, 11086, 62, 23, 14, 672, 7, 2438, 5, 12093, 741, 1043, 4296, 4, 50121, 50118, 530, 17698, 219, 1604, 3326, 35, 96, 5, 7678, 23890, 609, 6, 61, 34, 45, 57, 396, 63, 2400, 6, 8, 103, 1233, 2390, 156, 11, 14, 6203, 6, 5, 8608, 13, 5, 3779, 717, 8864, 1591, 14, 6, 8, 38, 437, 164, 7, 9740, 24, 35, 128, 16215, 19040, 197, 28, 441, 7, 244, 408, 8, 664, 82, 7, 146, 5678, 420, 49, 2239, 6, 2406, 561, 430, 5894, 7, 10154, 6, 13, 1246, 6, 505, 7614, 215, 25, 8860, 6, 6789, 6, 613, 9388, 8, 11128, 955, 407, 6, 5, 2654, 1393, 13, 84, 3779, 717, 4907, 6, 3334, 6, 16, 5, 2460, 1825, 13, 128, 42697, 2650, 13611, 4123, 3934, 53, 11, 4568, 84, 2948, 7, 28, 11, 10, 737, 7, 5116, 2438, 14, 6, 167, 32, 67, 5, 16954, 1073, 32481, 7797, 8, 14, 3294, 11, 16954, 1073, 21370, 14, 52, 192, 14485, 7, 5, 12093, 741, 7904, 2331, 2407, 877, 4, 407, 6, 24, 16, 888, 10, 233, 9, 5, 7678, 23890, 609, 14, 5, 12522, 14, 5, 92, 3779, 717, 4898, 40, 33, 7, 2438, 578, 1290, 5206, 14, 2948, 33, 167, 2417, 8, 33, 14, 2123, 7, 28, 441, 7, 2438, 49, 5307, 11, 10, 169, 14, 6, 25, 38, 26, 6, 14905, 14, 52, 5116, 2438, 15, 807, 1478, 6, 53, 67, 15, 5, 276, 16954, 1073, 32481, 7797, 14, 32, 956, 13, 5, 1800, 2996, 9, 5, 12093, 741, 1043, 4, 50121, 50118, 20689, 5144, 12051, 3326, 35, 96, 5, 1198, 12, 19195, 1478, 675, 6, 172, 6, 12205, 11, 1508, 99, 47, 348, 95, 26, 6, 109, 47, 1057, 7, 192, 10, 6564, 11, 3855, 15, 141, 5, 741, 7904, 2331, 2407, 877, 16, 551, 62, 30, 167, 1304, 14, 32, 855, 540, 5609, 15, 24, 116, 50121, 50118, 530, 17698, 219, 1604, 3326, 35, 38, 1034, 14, 52, 40, 192, 1130, 1530, 9, 521, 602, 5, 15496, 8, 41, 712, 11, 5, 1318, 9, 14, 676, 13, 664, 82, 4, 287, 52, 3373, 656, 6, 52, 214, 45, 95, 2445, 13, 5, 92, 11295, 7, 283, 66, 9, 84, 3779, 717, 4898, 4, 345, 18, 10, 1086, 26268, 9, 5, 6862, 416, 66, 89, 4, 252, 197, 28, 2], 'attention_masklabels': [0, 14273, 594, 22171, 12, 104, 47594, 3915, 59, 5, 29360, 9, 5, 12522, 23, 4300, 11897, 204, 4, 16071, 219, 1604, 7189, 69, 14, 5, 6707, 1539, 10921, 888, 14953, 10, 4007, 3143, 9, 5717, 577, 4, 91, 355, 14, 5, 13559, 14868, 5295, 56, 7123, 88, 5, 15496, 7, 192, 549, 5, 2948, 58, 350, 15, 33961, 8, 114, 89, 21, 143, 41988, 11, 521, 108, 25024, 4, 287, 13, 5, 12093, 25929, 54, 4689, 1156, 3353, 1386, 9, 12093, 1980, 6, 16071, 219, 1604, 2002, 14, 5, 2188, 639, 429, 28, 1337, 8, 543, 7, 30127, 4, 2]}.
***** Running training *****
  Num examples = 986
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9860
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 19.7544, 'rouge2': 1.4788, 'rougeL': 16.3186, 'rougeLsum': 18.5003}, 'ppl': {'perplexity': 209.4692, 'ref_perplexity': 867.7597}, 'bertscore': {'precision': 75.1058, 'recall': 79.2294, 'f1': 77.1071}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 13.7356, 'rouge2': 3.6856, 'rougeL': 10.5797, 'rougeLsum': 12.7293}, 'ppl': {'perplexity': 111.2074, 'ref_perplexity': 431.7495}, 'bertscore': {'precision': 86.5535, 'recall': 82.8743, 'f1': 84.6698}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 20.3148, 'rouge2': 5.3619, 'rougeL': 16.1131, 'rougeLsum': 18.8176}, 'ppl': {'perplexity': 37.5769, 'ref_perplexity': 308.8111}, 'bertscore': {'precision': 85.5223, 'recall': 82.9415, 'f1': 84.1996}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 20.7516, 'rouge2': 5.0992, 'rougeL': 15.053, 'rougeLsum': 18.204}, 'ppl': {'perplexity': 34.391, 'ref_perplexity': 267.982}, 'bertscore': {'precision': 83.9936, 'recall': 82.9529, 'f1': 83.4632}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 20.7836, 'rouge2': 5.2195, 'rougeL': 15.6682, 'rougeLsum': 19.036}, 'ppl': {'perplexity': 30.4649, 'ref_perplexity': 261.8258}, 'bertscore': {'precision': 86.3195, 'recall': 83.3945, 'f1': 84.8243}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.4207, 'rouge2': 5.7726, 'rougeL': 17.2997, 'rougeLsum': 23.2061}, 'ppl': {'perplexity': 30.8662, 'ref_perplexity': 268.7521}, 'bertscore': {'precision': 84.9021, 'recall': 83.5789, 'f1': 84.2299}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 22.8694, 'rouge2': 5.4161, 'rougeL': 16.3346, 'rougeLsum': 20.5555}, 'ppl': {'perplexity': 39.8249, 'ref_perplexity': 281.2615}, 'bertscore': {'precision': 85.4522, 'recall': 83.6553, 'f1': 84.5396}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.8034, 'rouge2': 5.6111, 'rougeL': 16.7097, 'rougeLsum': 21.5714}, 'ppl': {'perplexity': 44.4503, 'ref_perplexity': 300.8606}, 'bertscore': {'precision': 85.5152, 'recall': 83.9214, 'f1': 84.7056}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 21.9423, 'rouge2': 4.5601, 'rougeL': 15.1323, 'rougeLsum': 19.4783}, 'ppl': {'perplexity': 55.9729, 'ref_perplexity': 340.1029}, 'bertscore': {'precision': 85.7108, 'recall': 83.8412, 'f1': 84.7592}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 22.9801, 'rouge2': 4.9997, 'rougeL': 15.572, 'rougeLsum': 20.3392}, 'ppl': {'perplexity': 51.0041, 'ref_perplexity': 377.7134}, 'bertscore': {'precision': 85.5113, 'recall': 83.9451, 'f1': 84.7151}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.0569, 'rouge2': 4.9261, 'rougeL': 16.1878, 'rougeLsum': 21.5012}, 'ppl': {'perplexity': 41.2012, 'ref_perplexity': 425.1202}, 'bertscore': {'precision': 85.1414, 'recall': 84.1471, 'f1': 84.6342}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.0451, 'rouge2': 4.5176, 'rougeL': 15.2013, 'rougeLsum': 20.6333}, 'ppl': {'perplexity': 32.4844, 'ref_perplexity': 484.9635}, 'bertscore': {'precision': 85.3432, 'recall': 84.0866, 'f1': 84.7025}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.3992, 'rouge2': 4.5318, 'rougeL': 15.801, 'rougeLsum': 21.4148}, 'ppl': {'perplexity': 50.0151, 'ref_perplexity': 522.5789}, 'bertscore': {'precision': 85.0685, 'recall': 84.2585, 'f1': 84.6559}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 22.1946, 'rouge2': 3.9908, 'rougeL': 14.6459, 'rougeLsum': 19.5043}, 'ppl': {'perplexity': 52.0131, 'ref_perplexity': 580.8784}, 'bertscore': {'precision': 85.2049, 'recall': 84.1382, 'f1': 84.6627}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 21.7701, 'rouge2': 4.1036, 'rougeL': 14.6562, 'rougeLsum': 19.3578}, 'ppl': {'perplexity': 25.8495, 'ref_perplexity': 629.406}, 'bertscore': {'precision': 85.3972, 'recall': 84.2369, 'f1': 84.8067}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.463, 'rouge2': 4.1064, 'rougeL': 15.1592, 'rougeLsum': 20.2073}, 'ppl': {'perplexity': 41.7251, 'ref_perplexity': 683.9208}, 'bertscore': {'precision': 85.1858, 'recall': 84.2519, 'f1': 84.7121}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 22.8847, 'rouge2': 4.249, 'rougeL': 15.3046, 'rougeLsum': 20.3016}, 'ppl': {'perplexity': 32.5753, 'ref_perplexity': 731.1619}, 'bertscore': {'precision': 85.4351, 'recall': 84.2756, 'f1': 84.8463}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.6882, 'rouge2': 4.1133, 'rougeL': 15.3836, 'rougeLsum': 20.9619}, 'ppl': {'perplexity': 44.9291, 'ref_perplexity': 754.8755}, 'bertscore': {'precision': 85.2653, 'recall': 84.2909, 'f1': 84.7714}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.1881, 'rouge2': 4.0814, 'rougeL': 15.0716, 'rougeLsum': 20.7093}, 'ppl': {'perplexity': 37.2973, 'ref_perplexity': 764.6042}, 'bertscore': {'precision': 85.2949, 'recall': 84.3131, 'f1': 84.7962}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.2648, 'rouge2': 4.0877, 'rougeL': 15.3989, 'rougeLsum': 20.4248}, 'ppl': {'perplexity': 60.9529, 'ref_perplexity': 780.5033}, 'bertscore': {'precision': 85.3018, 'recall': 84.3871, 'f1': 84.8374}}

Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Round 6
Start Training!
Sample 162 of the training set: {'input_ids': [0, 38182, 3916, 2072, 5, 3221, 59, 8348, 10, 14160, 6231, 13, 6063, 1521, 4, 47385, 50121, 50118, 10006, 16382, 35, 2615, 38, 17487, 25522, 31375, 1536, 9834, 24303, 407, 122, 5, 485, 803, 52, 52, 33, 626, 9565, 9, 5, 6063, 797, 7252, 479, 407, 2156, 5, 144, 505, 6659, 13, 6063, 5656, 16, 7, 28, 13185, 356, 8, 619, 8, 45, 595, 12628, 356, 8, 619, 479, 178, 7252, 5, 200, 6659, 16, 37463, 14, 5, 6063, 797, 197, 28, 37463, 9874, 5497, 479, 50121, 50118, 33347, 4827, 35, 8487, 479, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 178, 5, 371, 144, 505, 6659, 16, 7, 7, 25522, 417, 32062, 6920, 254, 24303, 16, 14, 5, 1029, 6063, 797, 197, 28, 1365, 7, 304, 479, 407, 2156, 32, 383, 52, 32, 52, 33, 37463, 1994, 59, 137, 479, 50121, 50118, 44518, 39322, 35, 256, 119, 12, 298, 5471, 479, 50121, 50118, 33347, 4827, 35, 8976, 479, 50121, 50118, 10006, 16382, 35, 8976, 479, 178, 7252, 25522, 417, 32062, 6920, 254, 24303, 98, 47, 47, 64, 213, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 33347, 4827, 35, 8976, 479, 50121, 50118, 10006, 16382, 35, 71, 479, 178, 89, 16, 10, 2734, 20162, 7873, 11, 2201, 8, 7338, 14, 33, 12333, 5, 511, 3926, 2156, 37463, 12849, 8, 8942, 40, 28, 5, 144, 505, 4782, 13, 5418, 2156, 5582, 2156, 8, 31199, 37529, 479, 25522, 31375, 1536, 9834, 24303, 407, 2156, 2085, 114, 84, 25522, 31375, 1536, 9834, 24303, 6063, 797, 33, 7, 28, 10, 6231, 1026, 50, 16090, 1026, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 8487, 479, 50121, 50118, 10006, 16382, 35, 402, 101, 14, 2156, 50, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 36926, 13700, 31275, 35, 38, 323, 41, 15162, 479, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 178, 5, 15408, 5, 1468, 16, 421, 7, 28, 2292, 1657, 219, 479, 50121, 50118, 33347, 4827, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 23129, 38, 218, 75, 216, 61, 1468, 25522, 31375, 1536, 9834, 24303, 64, 28, 2292, 1657, 219, 2156, 50121, 50118, 33347, 4827, 35, 8976, 479, 50121, 50118, 10006, 16382, 35, 8, 114, 47, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 33347, 4827, 35, 152, 16, 205, 67, 13, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 44518, 39322, 35, 2647, 2156, 885, 1438, 885, 1438, 38, 206, 52, 64, 1819, 95, 342, 5, 8917, 11, 10, 2292, 1657, 219, 631, 2156, 50121, 50118, 36926, 13700, 31275, 35, 8976, 479, 50121, 50118, 44518, 39322, 35, 24, 24, 74, 173, 2156, 235, 17487, 50121, 50118, 33347, 4827, 35, 8976, 479, 50121, 50118, 36926, 13700, 31275, 35, 8976, 479, 50121, 50118, 44518, 39322, 35, 8976, 479, 50121, 50118, 10006, 16382, 35, 256, 119, 12, 298, 5471, 479, 50121, 50118, 33347, 4827, 35, 38, 206, 24, 16, 205, 67, 856, 7, 33, 10, 2292, 1657, 219, 1468, 2156, 11380, 479, 50121, 50118, 44518, 39322, 35, 370, 64, 3211, 24, 7, 5, 2384, 479, 50121, 50118, 33347, 4827, 35, 8976, 2156, 142, 24, 18, 6295, 479, 50121, 50118, 10006, 16382, 35, 8487, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 36926, 13700, 31275, 35, 8976, 479, 1464, 350, 479, 50121, 50118, 10006, 16382, 35, 85, 18, 6295, 2156, 11380, 479, 50121, 50118, 44518, 39322, 35, 11468, 14, 18, 10, 3035, 65, 479, 166, 115, 224, 14, 114, 47, 3211, 24, 2156, 47, 33, 10, 9626, 2156, 8, 47, 3211, 24, 8, 2323, 5, 2384, 8, 4072, 24, 160, 479, 50121, 50118, 33347, 4827, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 44518, 39322, 35, 520, 24, 385, 37463, 1239, 10, 4817, 479, 50121, 50118, 33347, 4827, 35, 8976, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 1491, 205, 479, 50121, 50118, 33347, 4827, 35, 37463, 6661, 17487, 50121, 50118, 36926, 13700, 31275, 35, 7746, 24, 18, 8578, 479, 38, 216, 14, 51, 109, 14, 13, 8054, 6700, 67, 479, 50121, 50118, 44518, 39322, 35, 8976, 479, 50121, 50118, 10006, 16382, 35, 660, 8, 8, 37463, 42, 37463, 47, 64, 11380, 47, 64, 224, 14, 479, 370, 6056, 37463, 47, 64, 213, 37463, 137, 50121, 50118, 33347, 4827, 35, 440, 479, 8976, 479, 3224, 17487, 50121, 50118, 10006, 16382, 35, 2156, 137, 2156, 4420, 479, 178, 47, 216, 259, 5, 55, 1437, 1210, 505, 6659, 16, 5, 13185, 356, 8, 619, 2156, 71, 16, 37463, 9874, 5497, 2156, 8, 71, 5, 1365, 7, 304, 479, 50121, 50118, 33347, 4827, 35, 8976, 479, 8976, 479, 8976, 479, 38, 206, 24, 18, 5497, 7, 304, 5, 15408, 5, 5964, 142, 38, 206, 117, 65, 1493, 34, 479, 50121, 50118, 36926, 13700, 31275, 35, 8976, 479, 50121, 50118, 10006, 16382, 35, 8976, 14, 18, 596, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 33347, 4827, 35, 6233, 24, 17487, 50121, 50118, 10006, 16382, 35, 8976, 14, 18, 596, 38, 206, 52, 33, 7, 489, 14, 114, 24, 18, 678, 479, 50121, 50118, 33347, 4827, 35, 8976, 479, 38, 206, 24, 18, 25522, 417, 32062, 6920, 254, 24303, 24, 817, 24, 258, 1365, 8, 258, 22282, 366, 5497, 479, 50121, 50118, 36926, 13700, 31275, 35, 256, 119, 12, 298, 5471, 479, 50121, 50118, 10006, 16382, 35, 20067, 3693, 479, 256, 119, 479, 50121, 50118, 33347, 4827, 35, 407, 38, 206, 24, 18, 10, 205, 6659, 8, 24, 197, 28, 1682, 479, 50121, 50118, 44518, 39322, 35, 1336, 109, 52, 146, 24, 356, 3035, 16, 5, 864, 479, 50121, 50118, 33347, 4827, 35, 12487, 2156, 13185, 17487, 50121, 50118, 44518, 39322, 35, 8976, 479, 50121, 50118, 33347, 4827, 35, 166, 33, 7, 146, 24, 784, 356, 101, 10, 6231, 50, 16090, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 44518, 39322, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 8976, 479, 50121, 50118, 33347, 4827, 35, 5359, 37463, 7252, 25522, 31375, 1536, 9834, 24303, 10, 7705, 14, 2145, 103, 6231, 37463, 2156, 383, 101, 14, 479, 50121, 50118, 36926, 13700, 31275, 35, 653, 59, 7252, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 256, 119, 479, 5534, 2156, 7705, 2156, 11380, 479, 50121, 50118, 44518, 39322, 35, 2647, 5, 4678, 631, 16, 10, 23611, 2156, 38, 4443, 479, 50121, 50118, 10006, 16382, 35, 5534, 25522, 417, 32062, 6920, 254, 24303, 939, 939, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 25522, 31375, 1536, 9834, 24303, 5359, 11380, 479, 50121, 50118, 36926, 13700, 31275, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 38, 802, 59, 10, 10, 30023, 2156, 13, 1246, 479, 370, 216, 5, 30023, 2156, 16, 101, 14, 8, 24, 18, 24, 18, 1365, 7, 7, 33, 11, 11, 865, 50121, 50118, 33347, 4827, 35, 8976, 2156, 8, 24, 18, 35389, 42141, 25, 157, 479, 50121, 50118, 10006, 16382, 35, 8, 37463, 25522, 417, 32062, 6920, 254, 24303, 8976, 479, 50121, 50118, 33347, 4827, 35, 83, 30023, 479, 50121, 50118, 44518, 39322, 35, 20, 23611, 16, 67, 35389, 42141, 479, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 8976, 479, 5359, 30023, 11380, 50, 402, 101, 14, 479, 50121, 50118, 10006, 16382, 35, 1793, 10, 6231, 101, 14, 479, 38, 46910, 479, 50121, 50118, 33347, 4827, 35, 8976, 479, 166, 64, 2268, 14, 37463, 479, 211, 211, 1534, 16, 89, 932, 47, 236, 7, 1606, 17487, 50121, 50118, 44518, 39322, 35, 1534, 89, 143, 6231, 14, 16, 2292, 1657, 219, 17487, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 25522, 31375, 1536, 9834, 24303, 38, 218, 75, 206, 98, 479, 38, 206, 52, 52, 64, 33, 101, 11380, 10, 30023, 16, 205, 2156, 2564, 157, 2156, 50, 23611, 25, 47, 174, 479, 50121, 50118, 44518, 39322, 35, 25522, 31375, 1536, 9834, 24303, 8976, 479, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 13676, 101, 14, 479, 50121, 50118, 36926, 13700, 31275, 35, 178, 13, 2085, 356, 8, 619, 2156, 99, 59, 10, 10, 2125, 9, 2480, 2156, 19, 2440, 226, 1215, 717, 1215, 495, 1215, 1025, 17487, 50121, 50118, 33347, 4827, 35, 125, 14, 18, 45, 11, 5, 2904, 479, 25522, 31375, 1536, 9834, 24303, 479, 50121, 50118, 44518, 39322, 35, 370, 64, 146, 24, 7252, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 20, 2904, 16, 2292, 1657, 219, 2156, 8, 16090, 12849, 479, 50121, 50118, 36926, 13700, 31275, 35, 8976, 479, 8976, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 44518, 39322, 35, 85, 18, 45, 543, 2156, 5, 4204, 479, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 25522, 31375, 1536, 9834, 24303, 38, 206, 181, 2292, 1657, 219, 16, 205, 142, 24, 24, 40, 28, 6295, 25, 157, 479, 50121, 50118, 36926, 13700, 31275, 35, 8976, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 44518, 39322, 35, 25568, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 36926, 13700, 31275, 35, 33597, 479, 50121, 50118, 33347, 4827, 35, 407, 2156, 38, 206, 52, 64, 489, 5, 5964, 142, 24, 18, 37463, 1365, 2156, 24, 18, 5497, 2156, 190, 114, 5, 701, 16, 10, 828, 723, 2156, 50121, 50118, 36926, 13700, 31275, 35, 8976, 479, 50121, 50118, 33347, 4827, 35, 8, 52, 67, 33, 7, 465, 10, 2156, 98, 2156, 10, 6231, 101, 30023, 50, 23611, 22094, 37463, 143, 643, 1114, 47, 33, 479, 653, 761, 9, 6664, 6231, 74, 47, 101, 7, 7, 797, 110, 255, 1215, 846, 1215, 19, 17487, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 44518, 39322, 35, 256, 119, 479, 50121, 50118, 33347, 4827, 35, 7032, 118, 50121, 50118, 36926, 13700, 31275, 35, 37969, 38, 206, 2156, 24, 18, 10, 2579, 1114, 479, 50121, 50118, 33347, 4827, 35, 37969, 16, 67, 5718, 98, 47, 47, 64, 75, 685, 110, 6063, 797, 172, 479, 50121, 50118, 36926, 13700, 31275, 35, 3047, 25522, 417, 32062, 6920, 254, 24303, 125, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 8976, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 44518, 39322, 35, 8976, 479, 50121, 50118, 36926, 13700, 31275, 35, 370, 1423, 47, 218, 75, 304, 5, 23611, 77, 5, 23611, 16, 5350, 6645, 101, 14, 2156, 50121, 50118, 44518, 39322, 35, 1596, 9, 5, 6148, 2156, 11380, 479, 50121, 50118, 36926, 13700, 31275, 35, 53, 77, 5, 23611, 16, 5350, 6645, 101, 14, 2156, 19, 5, 5964, 15, 5, 299, 8, 7, 797, 2156, 50121, 50118, 44518, 39322, 35, 8976, 479, 8976, 479, 50121, 50118, 36926, 13700, 31275, 35, 8, 259, 47, 33, 10, 10, 1920, 6148, 7, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 10006, 16382, 35, 125, 47, 218, 75, 33, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 33347, 4827, 35, 38, 206, 24, 18, 10, 205, 1114, 2156, 11380, 479, 50121, 50118, 44518, 39322, 35, 8976, 98, 47, 64, 95, 33, 37463, 95, 33, 42, 9158, 2156, 11380, 2156, 8, 47, 517, 37463, 110, 865, 259, 7, 1228, 5, 14893, 8, 172, 47, 517, 37463, 15, 5, 97, 526, 479, 50121, 50118, 33347, 4827, 35, 8976, 479, 50121, 50118, 36926, 13700, 31275, 35, 8976, 479, 50121, 50118, 44518, 39322, 35, 407, 47, 64, 33, 24, 15, 15, 80, 2380, 8, 24, 581, 28, 3035, 2156, 50121, 50118, 33347, 4827, 35, 8976, 479, 50121, 50118, 44518, 39322, 35, 117, 17487, 50121, 50118, 33347, 4827, 35, 38, 206, 24, 18, 10, 205, 1521, 8, 24, 18, 5497, 25, 157, 172, 479, 5359, 52, 64, 489, 5, 23611, 479, 178, 24, 40, 28, 182, 1365, 7, 465, 479, 50121, 50118, 36926, 13700, 31275, 35, 178, 3370, 2215, 99, 16, 10, 23611, 479, 50121, 50118, 44518, 39322, 35, 370, 64, 342, 67, 31495, 2630, 1025, 479, 50121, 50118, 36926, 13700, 31275, 35, 23381, 479, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 8976, 479, 50121, 50118, 36926, 13700, 2], 'attention_masklabels': [0, 10006, 16382, 2942, 210, 557, 14, 2528, 5, 275, 6063, 1521, 74, 28, 2292, 1657, 219, 8, 185, 5, 1026, 9, 10, 6231, 50, 16090, 4, 20, 2557, 13372, 13, 5, 6063, 3989, 58, 23611, 6, 15162, 6, 8, 30023, 4, 37969, 351, 142, 9, 63, 7705, 8, 2773, 35432, 3989, 4, 2]}.
***** Running training *****
  Num examples = 986
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9860
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 20.1377, 'rouge2': 1.4213, 'rougeL': 16.5607, 'rougeLsum': 18.9018}, 'ppl': {'perplexity': 193.302, 'ref_perplexity': 787.218}, 'bertscore': {'precision': 76.22, 'recall': 79.4853, 'f1': 77.8109}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 14.1734, 'rouge2': 3.2283, 'rougeL': 11.6879, 'rougeLsum': 12.7711}, 'ppl': {'perplexity': 107.1305, 'ref_perplexity': 368.8072}, 'bertscore': {'precision': 86.6345, 'recall': 82.4854, 'f1': 84.4937}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
Parameter 'function'=<function get_datasets.<locals>.preprocess_function at 0x78f69e176310> of the transform datasets.arrow_dataset.Dataset._map_single couldn't be hashed properly, a random hash was used instead. Make sure your transforms and parameters are serializable with pickle or dill for the dataset fingerprinting and caching to work. If you reuse this transform, the caching mechanism will consider it to be different from the previous calls and recompute everything. This warning is only showed once. Subsequent hashing failures won't be showed.

Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Round 6
Start Training!
Sample 840 of the training set: {'input_ids': [0, 2264, 222, 1464, 5846, 338, 9224, 8391, 224, 59, 5, 943, 1539, 13, 5929, 1304, 116, 47385, 50121, 50118, 5096, 5846, 338, 9224, 8391, 35, 2647, 6, 24, 16, 9, 2212, 7, 201, 6, 9, 768, 4, 38, 1034, 14, 52, 40, 33, 41, 945, 7, 1067, 59, 5, 1313, 5894, 9, 5, 1265, 467, 11, 5295, 6, 142, 89, 32, 10, 346, 9, 205, 383, 52, 64, 266, 67, 4, 20, 2270, 1293, 6, 5, 780, 1293, 6, 618, 12, 1549, 578, 8585, 32, 171, 4723, 14, 32, 608, 157, 6, 8, 38, 206, 10, 527, 14, 18, 1605, 1313, 42, 76, 16, 14, 52, 33, 450, 25209, 25001, 2833, 3927, 4, 166, 33, 450, 7721, 9, 4206, 1524, 11, 14, 1293, 13, 5, 78, 86, 11, 171, 10, 76, 6, 8, 52, 348, 67, 450, 4206, 1524, 11, 2222, 780, 1304, 6, 61, 16, 67, 10, 1293, 578, 4, 3047, 209, 32, 80, 4723, 147, 89, 32, 182, 6, 182, 4478, 408, 11, 6856, 4, 407, 6, 38, 206, 14, 18, 182, 5513, 4, 125, 6, 47, 214, 235, 6, 9, 768, 6, 5, 934, 2212, 13, 5, 467, 6, 38, 74, 224, 6, 16, 5929, 1304, 6, 8, 14, 16, 41, 696, 9, 1673, 6, 8, 67, 9, 5, 1318, 9, 5, 5307, 8, 2239, 4, 2246, 32, 5, 4664, 14, 52, 146, 144, 747, 11, 84, 9472, 690, 4, 407, 6, 38, 679, 14, 89, 16, 10, 240, 7, 465, 10, 251, 12, 1279, 2472, 6, 25, 38, 2801, 1433, 6, 8, 67, 10, 765, 12, 1279, 2472, 7, 42, 936, 4, 96, 5, 251, 1385, 6, 7, 1477, 5, 1318, 9, 5307, 8, 2239, 578, 3056, 6, 14, 17, 27, 29, 5, 1049, 4374, 9, 5, 92, 12522, 4, 407, 6, 38, 524, 3230, 14, 14, 1860, 16, 5, 235, 1860, 4, 85, 40, 185, 86, 6, 25, 52, 2801, 1433, 131, 24, 40, 185, 1181, 11, 5929, 1304, 6, 8, 14, 18, 13, 10, 346, 9, 2188, 6, 8, 38, 33, 3373, 5, 2019, 14, 32, 943, 13, 5929, 1304, 11, 986, 1013, 690, 4, 407, 6, 89, 32, 171, 2188, 596, 5929, 1304, 465, 24, 55, 1202, 6, 3544, 6, 87, 2270, 1304, 4, 20, 408, 1235, 32, 2530, 8, 51, 33, 2388, 2019, 4, 3126, 16, 55, 6336, 13, 106, 6, 3544, 4, 85, 17, 27, 29, 55, 1202, 7, 4949, 19, 5, 1041, 9, 2530, 408, 87, 3240, 408, 6, 8, 14, 17, 27, 29, 41, 505, 3724, 4, 280, 17, 27, 29, 65, 9, 5, 2188, 596, 38, 679, 24, 17, 27, 29, 505, 14, 52, 109, 33, 435, 1304, 14, 1306, 14, 5, 1041, 32, 233, 9, 5, 334, 17, 27, 29, 301, 8, 185, 41, 773, 11, 5, 1265, 9, 49, 408, 4, 166, 67, 216, 14, 18952, 185, 10, 182, 5395, 774, 11, 5929, 1304, 17, 27, 7283, 2580, 6, 8, 6, 11, 103, 1200, 6, 2532, 36785, 98, 4, 407, 6, 52, 240, 7, 1306, 14, 167, 18952, 32, 34917, 25, 10, 898, 9, 5, 3114, 9, 5, 12522, 6, 8, 6, 9, 768, 6, 13559, 14868, 5295, 16, 3406, 66, 14, 173, 855, 4, 178, 67, 6, 52, 240, 7, 464, 5, 1797, 14, 52, 304, 7, 2450, 5, 1304, 17, 27, 15185, 4, 978, 6, 89, 16, 173, 2256, 15, 14, 25, 157, 4, 125, 89, 32, 70, 6134, 9, 18746, 8, 5550, 227, 5, 2270, 8, 5929, 4723, 4, 96, 2270, 1304, 6, 13, 1246, 6, 5, 3968, 8, 144, 4678, 2249, 6, 38, 74, 224, 6, 16, 14, 47, 17, 27, 548, 300, 65, 3254, 54, 1326, 71, 10, 920, 13, 10, 1086, 76, 6, 8, 14, 3254, 64, 3058, 5, 782, 9, 5, 25209, 182, 157, 81, 10, 675, 9, 86, 6, 562, 7, 216, 5, 920, 8, 6, 3544, 6, 5, 284, 182, 157, 4, 85, 17, 27, 29, 203, 55, 6336, 13, 5929, 334, 7, 109, 14, 131, 89, 33, 7, 28, 1743, 342, 11, 317, 13, 14, 4, 407, 6, 89, 32, 171, 251, 12, 1279, 383, 14, 52, 240, 7, 2519, 7, 4, 125, 11, 5, 765, 1385, 6, 99, 16, 505, 16, 14, 167, 1304, 14, 1303, 2212, 1325, 203, 55, 323, 6, 8, 14, 16, 596, 38, 524, 7785, 8, 109, 2814, 99, 18, 145, 25172, 11367, 855, 6, 61, 16, 10, 467, 9, 3117, 209, 1304, 6, 5, 3228, 12, 26904, 1548, 6, 14, 16, 4, 407, 6, 14, 16, 402, 14, 52, 33, 57, 1765, 13, 13, 1341, 10, 251, 675, 9, 86, 8, 25172, 11367, 4288, 10, 367, 107, 536, 4, 407, 6, 38, 437, 182, 7785, 14, 52, 32, 608, 42, 11, 5929, 1304, 1328, 5295, 4, 38, 679, 89, 32, 59, 316, 1304, 14, 32, 11, 14, 4792, 3552, 4, 2], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'labels': [0, 133, 408, 11, 5929, 1304, 1235, 32, 2530, 8, 3891, 33, 2388, 2019, 4, 287, 10, 898, 6, 24, 18, 67, 55, 1202, 7, 4949, 19, 5, 1041, 9, 2530, 408, 87, 3240, 408, 4, 2]}.
***** Running training *****
  Num examples = 986
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9860
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 20.3778, 'rouge2': 1.6009, 'rougeL': 17.0494, 'rougeLsum': 19.4033}, 'ppl': {'perplexity': 138.0373, 'ref_perplexity': 791.3886}, 'bertscore': {'precision': 74.4722, 'recall': 79.899, 'f1': 77.0781}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 14.4369, 'rouge2': 3.2821, 'rougeL': 11.6891, 'rougeLsum': 13.0726}, 'ppl': {'perplexity': 40.6295, 'ref_perplexity': 352.0499}, 'bertscore': {'precision': 85.2336, 'recall': 83.1571, 'f1': 84.1666}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 18.6241, 'rouge2': 4.9701, 'rougeL': 14.43, 'rougeLsum': 17.017}, 'ppl': {'perplexity': 69.0997, 'ref_perplexity': 246.5254}, 'bertscore': {'precision': 86.0911, 'recall': 83.4209, 'f1': 84.7248}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.2542, 'rouge2': 5.5674, 'rougeL': 16.2395, 'rougeLsum': 20.7079}, 'ppl': {'perplexity': 38.581, 'ref_perplexity': 216.148}, 'bertscore': {'precision': 85.7271, 'recall': 83.7572, 'f1': 84.7262}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.1051, 'rouge2': 6.6829, 'rougeL': 17.5116, 'rougeLsum': 21.6897}, 'ppl': {'perplexity': 79.815, 'ref_perplexity': 210.9715}, 'bertscore': {'precision': 85.5457, 'recall': 83.9581, 'f1': 84.7363}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.6277, 'rouge2': 6.3454, 'rougeL': 17.2577, 'rougeLsum': 21.8044}, 'ppl': {'perplexity': 36.0044, 'ref_perplexity': 208.229}, 'bertscore': {'precision': 85.2424, 'recall': 84.1276, 'f1': 84.674}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.9393, 'rouge2': 5.8675, 'rougeL': 17.5403, 'rougeLsum': 22.1074}, 'ppl': {'perplexity': 30.0619, 'ref_perplexity': 221.6302}, 'bertscore': {'precision': 85.7099, 'recall': 84.2079, 'f1': 84.9455}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.7982, 'rouge2': 5.1895, 'rougeL': 16.0091, 'rougeLsum': 20.955}, 'ppl': {'perplexity': 22.13, 'ref_perplexity': 245.6802}, 'bertscore': {'precision': 85.3959, 'recall': 84.2199, 'f1': 84.7964}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.6252, 'rouge2': 5.5922, 'rougeL': 17.172, 'rougeLsum': 22.6016}, 'ppl': {'perplexity': 25.6094, 'ref_perplexity': 275.3088}, 'bertscore': {'precision': 84.5619, 'recall': 84.2084, 'f1': 84.3792}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.0022, 'rouge2': 5.0818, 'rougeL': 15.355, 'rougeLsum': 21.228}, 'ppl': {'perplexity': 24.9382, 'ref_perplexity': 305.1791}, 'bertscore': {'precision': 85.1413, 'recall': 84.3113, 'f1': 84.7167}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.8388, 'rouge2': 4.5033, 'rougeL': 15.303, 'rougeLsum': 20.9991}, 'ppl': {'perplexity': 40.7556, 'ref_perplexity': 348.9097}, 'bertscore': {'precision': 85.377, 'recall': 84.473, 'f1': 84.9161}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.2949, 'rouge2': 4.6476, 'rougeL': 15.6936, 'rougeLsum': 20.7004}, 'ppl': {'perplexity': 40.6459, 'ref_perplexity': 398.7146}, 'bertscore': {'precision': 85.1865, 'recall': 84.5283, 'f1': 84.8498}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.7735, 'rouge2': 4.6734, 'rougeL': 15.714, 'rougeLsum': 21.2616}, 'ppl': {'perplexity': 21.0003, 'ref_perplexity': 442.0717}, 'bertscore': {'precision': 84.8465, 'recall': 84.5436, 'f1': 84.6893}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.966, 'rouge2': 4.6376, 'rougeL': 16.3022, 'rougeLsum': 21.9819}, 'ppl': {'perplexity': 31.9352, 'ref_perplexity': 484.5128}, 'bertscore': {'precision': 84.7805, 'recall': 84.5278, 'f1': 84.6495}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.8907, 'rouge2': 4.5386, 'rougeL': 15.5638, 'rougeLsum': 21.5864}, 'ppl': {'perplexity': 38.4551, 'ref_perplexity': 519.4621}, 'bertscore': {'precision': 84.7502, 'recall': 84.6231, 'f1': 84.6821}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.3543, 'rouge2': 4.6025, 'rougeL': 15.8214, 'rougeLsum': 21.5023}, 'ppl': {'perplexity': 39.3367, 'ref_perplexity': 564.2151}, 'bertscore': {'precision': 84.9713, 'recall': 84.5103, 'f1': 84.7342}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.1632, 'rouge2': 4.6874, 'rougeL': 15.5682, 'rougeLsum': 21.0298}, 'ppl': {'perplexity': 45.0343, 'ref_perplexity': 595.6139}, 'bertscore': {'precision': 85.2314, 'recall': 84.62, 'f1': 84.9186}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.1779, 'rouge2': 4.4284, 'rougeL': 15.0646, 'rougeLsum': 20.4661}, 'ppl': {'perplexity': 22.4648, 'ref_perplexity': 629.2273}, 'bertscore': {'precision': 85.2989, 'recall': 84.6422, 'f1': 84.9645}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.4262, 'rouge2': 4.4647, 'rougeL': 15.6072, 'rougeLsum': 20.6912}, 'ppl': {'perplexity': 18.3951, 'ref_perplexity': 638.1818}, 'bertscore': {'precision': 85.2202, 'recall': 84.6148, 'f1': 84.9116}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.654, 'rouge2': 4.2464, 'rougeL': 15.0388, 'rougeLsum': 20.4764}, 'ppl': {'perplexity': 37.9092, 'ref_perplexity': 645.0329}, 'bertscore': {'precision': 85.0106, 'recall': 84.5775, 'f1': 84.788}}

Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Round 7
Start Training!
Sample 432 of the training set: {'input_ids': [0, 2264, 32, 5, 12340, 8, 5, 38940, 9, 2236, 4972, 31, 333, 3221, 116, 47385, 50121, 50118, 36926, 13700, 31275, 35, 8487, 2156, 686, 479, 50121, 50118, 33347, 4827, 35, 8, 172, 172, 52, 64, 25522, 417, 32062, 6920, 254, 24303, 38, 218, 75, 216, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 10006, 16382, 35, 33597, 479, 50121, 50118, 33347, 4827, 35, 7252, 429, 33, 57, 10, 205, 1114, 7, 70, 2438, 84, 16288, 8, 172, 2268, 2156, 53, 42, 16, 42, 16, 141, 52, 214, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 10006, 16382, 35, 8976, 2156, 24, 18, 205, 25522, 417, 32062, 6920, 254, 24303, 157, 24, 18, 205, 7, 120, 2956, 66, 150, 51, 214, 2310, 11, 1508, 479, 50121, 50118, 33347, 4827, 35, 8976, 2156, 2230, 2156, 11380, 479, 50121, 50118, 10006, 16382, 35, 12698, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 33347, 4827, 35, 5534, 24, 18, 402, 14, 18, 95, 2756, 7, 162, 25, 157, 16, 114, 52, 146, 24, 7252, 1901, 3872, 139, 114, 52, 14518, 1901, 4972, 2156, 14, 18, 9364, 7, 82, 7252, 2085, 19, 10, 2166, 11096, 25, 157, 479, 50121, 50118, 10006, 16382, 35, 1491, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 33347, 4827, 35, 12698, 479, 50121, 50118, 10006, 16382, 35, 8976, 479, 178, 45, 2086, 479, 178, 67, 24, 2607, 11, 1110, 9, 82, 45, 2086, 42, 2156, 50121, 50118, 33347, 4827, 35, 25522, 31375, 1536, 9834, 24303, 8976, 479, 50121, 50118, 10006, 16382, 35, 47, 216, 51, 25522, 417, 32062, 6920, 254, 24303, 51, 214, 584, 14223, 24, 18, 25522, 417, 32062, 6920, 254, 24303, 38, 2217, 24, 11, 5, 16433, 479, 50121, 50118, 33347, 4827, 35, 8976, 479, 50121, 50118, 10006, 16382, 35, 25522, 29183, 24303, 101, 52, 214, 761, 9, 99, 52, 214, 741, 2345, 9, 562, 11, 88, 259, 16, 40297, 430, 37463, 1521, 1575, 561, 50121, 50118, 33347, 4827, 35, 256, 119, 12, 298, 5471, 479, 50121, 50118, 10006, 16382, 35, 14, 51, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 44518, 39322, 35, 38, 29057, 65, 936, 19, 1901, 4972, 16, 7252, 38, 348, 888, 450, 65, 9, 106, 341, 8, 37463, 5, 806, 14, 21, 11, 14, 65, 938, 75, 1605, 2770, 2156, 98, 47, 253, 62, 16600, 23, 5, 797, 13, 722, 479, 50121, 50118, 36926, 13700, 31275, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 16923, 17487, 50121, 50118, 44518, 39322, 35, 5331, 62, 479, 50121, 50118, 10006, 16382, 35, 5143, 479, 50121, 50118, 44518, 39322, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 5534, 269, 2156, 47, 348, 450, 65, 137, 479, 50121, 50118, 33347, 4827, 35, 1832, 47, 206, 2085, 52, 240, 101, 617, 9766, 11, 14, 761, 9, 443, 454, 24, 18, 22057, 22690, 24, 600, 17487, 50121, 50118, 44518, 39322, 35, 12698, 25522, 417, 32062, 6920, 254, 24303, 25522, 31375, 1536, 9834, 24303, 38, 206, 24, 1017, 1153, 1341, 3214, 7, 342, 11, 479, 2], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'labels': [0, 133, 2236, 4972, 115, 2438, 12340, 7, 2166, 11096, 8, 82, 45, 2086, 5, 6063, 4, 635, 6, 24, 115, 146, 82, 28930, 23, 5, 797, 13, 722, 77, 5, 5043, 21, 11, 3605, 4, 407, 5, 333, 1687, 549, 89, 21, 10, 240, 7, 1606, 617, 3319, 40363, 4, 2]}.
***** Running training *****
  Num examples = 986
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9860
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 16.463, 'rouge2': 1.1553, 'rougeL': 13.5423, 'rougeLsum': 15.0587}, 'ppl': {'perplexity': 545.2432, 'ref_perplexity': 557.2062}, 'bertscore': {'precision': 75.8512, 'recall': 79.3786, 'f1': 77.5695}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 14.8469, 'rouge2': 5.2958, 'rougeL': 12.9059, 'rougeLsum': 13.7385}, 'ppl': {'perplexity': 69.384, 'ref_perplexity': 213.0205}, 'bertscore': {'precision': 87.8902, 'recall': 83.1859, 'f1': 85.4607}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 21.9357, 'rouge2': 6.9089, 'rougeL': 16.8857, 'rougeLsum': 20.0318}, 'ppl': {'perplexity': 45.3251, 'ref_perplexity': 150.9587}, 'bertscore': {'precision': 86.5809, 'recall': 84.2199, 'f1': 85.3767}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.2914, 'rouge2': 7.091, 'rougeL': 17.9954, 'rougeLsum': 21.035}, 'ppl': {'perplexity': 13.676, 'ref_perplexity': 134.5851}, 'bertscore': {'precision': 87.5486, 'recall': 84.7342, 'f1': 86.1106}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.9402, 'rouge2': 7.433, 'rougeL': 17.9942, 'rougeLsum': 22.5465}, 'ppl': {'perplexity': 25.6682, 'ref_perplexity': 127.8543}, 'bertscore': {'precision': 86.5151, 'recall': 84.3891, 'f1': 85.4323}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.16, 'rouge2': 7.1822, 'rougeL': 17.8459, 'rougeLsum': 22.3332}, 'ppl': {'perplexity': 29.3398, 'ref_perplexity': 130.6036}, 'bertscore': {'precision': 86.6438, 'recall': 84.7302, 'f1': 85.6692}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.5594, 'rouge2': 7.0182, 'rougeL': 18.3929, 'rougeLsum': 23.9535}, 'ppl': {'perplexity': 12.2857, 'ref_perplexity': 137.8641}, 'bertscore': {'precision': 85.9865, 'recall': 84.9603, 'f1': 85.4649}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.9502, 'rouge2': 7.1574, 'rougeL': 18.0653, 'rougeLsum': 22.8476}, 'ppl': {'perplexity': 54.3131, 'ref_perplexity': 150.7589}, 'bertscore': {'precision': 86.3392, 'recall': 84.9623, 'f1': 85.6395}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.7835, 'rouge2': 7.775, 'rougeL': 17.8606, 'rougeLsum': 23.8246}, 'ppl': {'perplexity': 80.271, 'ref_perplexity': 168.0203}, 'bertscore': {'precision': 85.2073, 'recall': 85.0882, 'f1': 85.1415}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.8379, 'rouge2': 7.3923, 'rougeL': 18.0868, 'rougeLsum': 23.7262}, 'ppl': {'perplexity': 42.3812, 'ref_perplexity': 190.5956}, 'bertscore': {'precision': 86.087, 'recall': 85.0907, 'f1': 85.576}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.8754, 'rouge2': 6.8708, 'rougeL': 18.0265, 'rougeLsum': 23.7138}, 'ppl': {'perplexity': 37.765, 'ref_perplexity': 215.1305}, 'bertscore': {'precision': 85.6527, 'recall': 85.1282, 'f1': 85.383}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 28.3299, 'rouge2': 7.1514, 'rougeL': 18.2997, 'rougeLsum': 24.5973}, 'ppl': {'perplexity': 33.7704, 'ref_perplexity': 240.0188}, 'bertscore': {'precision': 85.3822, 'recall': 85.097, 'f1': 85.2332}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.6102, 'rouge2': 6.2768, 'rougeL': 17.9736, 'rougeLsum': 24.2581}, 'ppl': {'perplexity': 45.5724, 'ref_perplexity': 266.9952}, 'bertscore': {'precision': 85.5766, 'recall': 85.0768, 'f1': 85.3191}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.821, 'rouge2': 7.2126, 'rougeL': 17.9674, 'rougeLsum': 24.4651}, 'ppl': {'perplexity': 29.1779, 'ref_perplexity': 291.1285}, 'bertscore': {'precision': 85.5392, 'recall': 85.1516, 'f1': 85.3392}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 28.8766, 'rouge2': 7.1166, 'rougeL': 18.4737, 'rougeLsum': 24.7094}, 'ppl': {'perplexity': 38.5197, 'ref_perplexity': 334.4354}, 'bertscore': {'precision': 85.2955, 'recall': 85.221, 'f1': 85.2526}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 28.3519, 'rouge2': 7.0933, 'rougeL': 18.4845, 'rougeLsum': 24.6505}, 'ppl': {'perplexity': 27.2744, 'ref_perplexity': 344.3912}, 'bertscore': {'precision': 85.6982, 'recall': 85.2168, 'f1': 85.4518}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.8256, 'rouge2': 6.9778, 'rougeL': 17.816, 'rougeLsum': 24.232}, 'ppl': {'perplexity': 31.5127, 'ref_perplexity': 364.3857}, 'bertscore': {'precision': 85.3657, 'recall': 85.2436, 'f1': 85.3001}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.1176, 'rouge2': 6.5074, 'rougeL': 17.745, 'rougeLsum': 23.9055}, 'ppl': {'perplexity': 11.6704, 'ref_perplexity': 383.2008}, 'bertscore': {'precision': 85.5106, 'recall': 85.2038, 'f1': 85.3519}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.5047, 'rouge2': 6.5933, 'rougeL': 17.7837, 'rougeLsum': 23.932}, 'ppl': {'perplexity': 45.0204, 'ref_perplexity': 394.4417}, 'bertscore': {'precision': 85.4496, 'recall': 85.1904, 'f1': 85.314}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.8183, 'rouge2': 6.6639, 'rougeL': 17.907, 'rougeLsum': 24.2445}, 'ppl': {'perplexity': 27.3255, 'ref_perplexity': 400.3634}, 'bertscore': {'precision': 85.4633, 'recall': 85.2168, 'f1': 85.3342}}

Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Round 8
Start Training!
Sample 62 of the training set: {'input_ids': [0, 2264, 222, 3728, 4827, 17, 27, 29, 206, 9, 5, 514, 12, 13319, 1521, 77, 7345, 5, 15293, 3471, 9, 5, 92, 6063, 797, 116, 47385, 50121, 50118, 44518, 39322, 35, 3201, 13319, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 25522, 31375, 1536, 9834, 24303, 3201, 12, 13319, 25, 157, 479, 50121, 50118, 36926, 13700, 31275, 35, 25522, 31375, 1536, 9834, 24303, 178, 38, 206, 52, 197, 33, 10, 2187, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 33347, 4827, 35, 5359, 24, 16, 1461, 142, 47, 64, 37463, 304, 24, 11, 110, 37463, 25522, 417, 32062, 6920, 254, 24303, 11, 110, 11824, 9641, 5, 643, 64, 75, 479, 50121, 50118, 44518, 39322, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 5359, 514, 12, 13319, 74, 28, 182, 1461, 479, 50121, 50118, 36926, 13700, 31275, 35, 19719, 479, 25522, 29183, 24303, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 289, 27374, 519, 10, 514, 12, 13319, 6063, 797, 98, 14, 5, 82, 64, 37463, 304, 24, 11, 49, 11824, 479, 50121, 50118, 44518, 39322, 35, 256, 119, 479, 50121, 50118, 33347, 4827, 35, 280, 115, 28, 37463, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 44518, 39322, 35, 163, 24, 1302, 37463, 98, 2156, 53, 37463, 114, 47, 218, 75, 33, 41, 28126, 6063, 797, 24, 839, 47, 64, 95, 1719, 24, 19, 103, 4136, 8, 47, 64, 2345, 9, 856, 50121, 50118, 33347, 4827, 35, 8976, 53, 2156, 24, 16, 202, 402, 37463, 47, 33, 7, 907, 8, 14, 16, 7252, 45, 2085, 182, 25522, 417, 32062, 6920, 254, 24303, 2], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'labels': [0, 41562, 5, 1152, 1461, 1571, 6, 3728, 4827, 2047, 14, 10, 514, 12, 13319, 6063, 797, 115, 28, 341, 11, 5, 11824, 31032, 150, 6549, 5, 2111, 17, 27, 29, 240, 7, 2229, 41, 1823, 4136, 1719, 4, 9068, 6, 1461, 1571, 8, 17755, 429, 28, 3491, 81, 2695, 785, 4, 2]}.
***** Running training *****
  Num examples = 986
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9860
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 18.0271, 'rouge2': 1.5812, 'rougeL': 14.6034, 'rougeLsum': 16.5758}, 'ppl': {'perplexity': 274.4802, 'ref_perplexity': 657.9638}, 'bertscore': {'precision': 77.0345, 'recall': 79.4274, 'f1': 78.2071}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 16.1618, 'rouge2': 4.5089, 'rougeL': 13.4644, 'rougeLsum': 14.9424}, 'ppl': {'perplexity': 55.2991, 'ref_perplexity': 288.4806}, 'bertscore': {'precision': 85.825, 'recall': 82.6311, 'f1': 84.1865}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 20.969, 'rouge2': 6.2416, 'rougeL': 16.0863, 'rougeLsum': 19.0105}, 'ppl': {'perplexity': 52.0291, 'ref_perplexity': 200.9024}, 'bertscore': {'precision': 86.3248, 'recall': 83.7744, 'f1': 85.0254}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.911, 'rouge2': 6.38, 'rougeL': 17.5334, 'rougeLsum': 21.9462}, 'ppl': {'perplexity': 40.3349, 'ref_perplexity': 182.2244}, 'bertscore': {'precision': 86.5383, 'recall': 84.0182, 'f1': 85.255}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.9984, 'rouge2': 7.0581, 'rougeL': 18.2824, 'rougeLsum': 24.3254}, 'ppl': {'perplexity': 36.4834, 'ref_perplexity': 176.9021}, 'bertscore': {'precision': 85.5124, 'recall': 84.2646, 'f1': 84.879}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.1988, 'rouge2': 6.3087, 'rougeL': 17.8626, 'rougeLsum': 22.8037}, 'ppl': {'perplexity': 34.1852, 'ref_perplexity': 184.1354}, 'bertscore': {'precision': 86.0254, 'recall': 84.1778, 'f1': 85.0805}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 28.1968, 'rouge2': 7.4865, 'rougeL': 19.1586, 'rougeLsum': 25.5654}, 'ppl': {'perplexity': 22.8146, 'ref_perplexity': 193.1772}, 'bertscore': {'precision': 85.5115, 'recall': 84.4202, 'f1': 84.9565}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.0698, 'rouge2': 7.0231, 'rougeL': 18.0723, 'rougeLsum': 23.1903}, 'ppl': {'perplexity': 42.2662, 'ref_perplexity': 209.2081}, 'bertscore': {'precision': 86.2947, 'recall': 84.3069, 'f1': 85.2813}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.2042, 'rouge2': 6.5073, 'rougeL': 17.7253, 'rougeLsum': 23.3343}, 'ppl': {'perplexity': 35.5399, 'ref_perplexity': 235.7598}, 'bertscore': {'precision': 85.6463, 'recall': 84.2981, 'f1': 84.9589}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.0447, 'rouge2': 6.4024, 'rougeL': 17.6998, 'rougeLsum': 23.827}, 'ppl': {'perplexity': 296.8412, 'ref_perplexity': 266.0998}, 'bertscore': {'precision': 85.6377, 'recall': 84.7659, 'f1': 85.1938}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.5168, 'rouge2': 6.4877, 'rougeL': 18.4253, 'rougeLsum': 24.252}, 'ppl': {'perplexity': 54.4491, 'ref_perplexity': 302.4063}, 'bertscore': {'precision': 85.7787, 'recall': 84.6079, 'f1': 85.1843}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.7991, 'rouge2': 5.6193, 'rougeL': 17.2397, 'rougeLsum': 22.6749}, 'ppl': {'perplexity': 64.1213, 'ref_perplexity': 337.1905}, 'bertscore': {'precision': 85.6083, 'recall': 84.5346, 'f1': 85.0631}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.0081, 'rouge2': 5.8743, 'rougeL': 17.6224, 'rougeLsum': 23.6879}, 'ppl': {'perplexity': 32.7426, 'ref_perplexity': 364.3911}, 'bertscore': {'precision': 85.4173, 'recall': 84.7113, 'f1': 85.0571}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.7985, 'rouge2': 5.432, 'rougeL': 17.4854, 'rougeLsum': 24.5415}, 'ppl': {'perplexity': 84.8223, 'ref_perplexity': 407.3251}, 'bertscore': {'precision': 85.2716, 'recall': 84.7641, 'f1': 85.0115}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.3173, 'rouge2': 5.5259, 'rougeL': 17.2334, 'rougeLsum': 22.9059}, 'ppl': {'perplexity': 42.2981, 'ref_perplexity': 442.4711}, 'bertscore': {'precision': 85.3711, 'recall': 84.6801, 'f1': 85.0188}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.5273, 'rouge2': 5.9779, 'rougeL': 17.2891, 'rougeLsum': 24.1525}, 'ppl': {'perplexity': 58.6724, 'ref_perplexity': 482.4388}, 'bertscore': {'precision': 85.4164, 'recall': 84.7473, 'f1': 85.0757}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.2317, 'rouge2': 5.1472, 'rougeL': 16.8155, 'rougeLsum': 23.019}, 'ppl': {'perplexity': 30.0295, 'ref_perplexity': 506.933}, 'bertscore': {'precision': 85.2971, 'recall': 84.6864, 'f1': 84.986}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.9708, 'rouge2': 5.4715, 'rougeL': 16.9381, 'rougeLsum': 23.7618}, 'ppl': {'perplexity': 25.7724, 'ref_perplexity': 542.201}, 'bertscore': {'precision': 85.1126, 'recall': 84.7578, 'f1': 84.93}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.2164, 'rouge2': 5.3047, 'rougeL': 16.553, 'rougeLsum': 22.845}, 'ppl': {'perplexity': 28.2269, 'ref_perplexity': 545.2384}, 'bertscore': {'precision': 85.0294, 'recall': 84.7069, 'f1': 84.8634}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.3525, 'rouge2': 5.6488, 'rougeL': 17.7282, 'rougeLsum': 23.9125}, 'ppl': {'perplexity': 26.2401, 'ref_perplexity': 562.0769}, 'bertscore': {'precision': 85.2144, 'recall': 84.7977, 'f1': 85.0003}}

Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Round 9
Start Training!
Sample 112 of the training set: {'input_ids': [0, 2264, 222, 8003, 605, 6227, 206, 9, 5, 22, 2362, 432, 113, 5665, 77, 1686, 59, 5, 559, 3618, 8, 5, 4374, 9, 5, 333, 116, 47385, 50121, 50118, 20689, 5144, 12051, 3326, 35, 3837, 47, 4, 38, 1017, 101, 7, 1394, 47, 258, 6, 114, 14, 18, 8578, 6, 10, 410, 828, 59, 2460, 1825, 4, 125, 114, 38, 115, 386, 19, 723, 1265, 6, 38, 1346, 14, 578, 100, 218, 75, 216, 6, 24, 531, 28, 59, 504, 377, 536, 122, 578, 28524, 4058, 1626, 174, 277, 1540, 11, 42, 317, 14, 89, 56, 57, 1117, 1293, 20070, 626, 4, 41366, 6, 65, 9, 167, 21, 12925, 6, 142, 9, 5, 578, 3056, 6, 12093, 1621, 56, 10, 2621, 6, 8, 202, 473, 6, 11, 6497, 6, 1330, 7, 723, 1265, 4, 15817, 6, 167, 33, 122, 57, 31716, 8652, 30, 173, 14, 18, 57, 626, 30, 12426, 589, 4, 38, 218, 75, 216, 114, 47, 348, 300, 143, 1450, 15, 14, 557, 6, 50, 549, 24, 18, 57, 1146, 7, 110, 1503, 648, 4, 50121, 50118, 530, 17698, 219, 1604, 3326, 35, 2647, 6, 3296, 5144, 6, 511, 5, 900, 6, 38, 21, 182, 5609, 14, 52, 173, 182, 3615, 19, 4025, 11, 723, 1265, 8, 617, 1265, 6, 7, 120, 41, 2969, 31, 15, 5, 1255, 59, 5, 801, 913, 4, 407, 6, 11, 1110, 9, 2460, 1825, 6, 52, 554, 14, 333, 11, 5, 772, 6, 8, 14, 173, 31, 14, 333, 6, 61, 1171, 258, 12925, 8, 16852, 6, 34, 57, 14123, 11, 1903, 5, 1621, 1026, 63, 2728, 6, 61, 58, 33508, 11, 5, 1621, 18, 735, 14479, 6, 128, 33099, 5206, 5295, 108, 7543, 2652, 345, 34, 57, 2256, 173, 145, 626, 578, 281, 5, 2625, 11, 928, 8, 1005, 3374, 10, 410, 828, 55, 699, 6, 172, 24, 3374, 10, 410, 540, 699, 6, 8, 172, 10, 410, 828, 55, 699, 6, 53, 6, 12205, 11, 1508, 5, 9282, 9, 447, 11, 41, 655, 12, 13378, 882, 6, 52, 33, 57, 19218, 167, 8369, 4, 4028, 6786, 34, 57, 546, 23, 49, 308, 6786, 6, 142, 6, 25, 47, 64, 4744, 6, 1712, 52, 33, 41, 13433, 9, 5, 1293, 6, 5, 2019, 32, 182, 430, 13, 1736, 3353, 578, 2527, 49, 4895, 6, 13, 4327, 6, 7, 5, 346, 9, 796, 1332, 521, 14, 51, 33, 23, 49, 1564, 6, 50, 5, 173, 14, 51, 429, 28, 608, 19, 18092, 2760, 6, 50, 49, 1282, 578, 463, 89, 34, 57, 9712, 1282, 11, 5, 12925, 882, 11, 10013, 9825, 1188, 13, 1337, 1377, 578, 627, 4895, 8, 5, 801, 913, 9, 1618, 5, 1281, 6, 11, 10, 128, 2362, 432, 108, 50, 11, 10, 128, 14861, 108, 5665, 6, 16, 182, 6, 182, 430, 4, 125, 38, 218, 75, 216, 114, 6, 8003, 605, 6, 47, 236, 7, 1067, 143, 617, 4, 50121, 50118, 20689, 5144, 12051, 3326, 35, 5359, 95, 7, 304, 5, 128, 2362, 432, 108, 5665, 16, 1153, 5, 18815, 6, 50141, 354, 282, 75, 24, 116, 50121, 50118, 530, 17698, 219, 1604, 3326, 35, 20, 128, 2362, 432, 35661, 50121, 50118, 20689, 5144, 12051, 3326, 35, 2647, 6, 4420, 6, 142, 14, 18, 5, 2373, 12, 11173, 5665, 6, 98, 905, 18, 356, 23, 14, 65, 4, 50121, 50118, 39087, 605, 6227, 35, 287, 5, 7062, 50141, 36035, 2801, 6, 5, 723, 1265, 2404, 447, 333, 18, 50141, 35507, 529, 187, 772, 336, 8, 34, 57, 546, 23, 14, 11, 937, 4, 901, 682, 6, 77, 5, 4517, 9, 117, 432, 1059, 3244, 59, 6, 503, 33, 57, 3918, 1736, 3353, 7, 1067, 7, 106, 59, 49, 2460, 1825, 13, 14, 4, 287, 47, 581, 28, 2542, 6, 5, 1435, 13, 203, 9, 5, 1940, 16, 5288, 6, 52, 679, 6, 190, 223, 10, 128, 2362, 432, 108, 5665, 6, 454, 719, 2760, 131, 14, 18, 10, 1601, 52, 56, 31, 5, 1231, 1863, 7, 5, 4732, 4, 38, 206, 5, 557, 47, 214, 5056, 7, 189, 28, 557, 14, 12426, 589, 34, 57, 608, 19, 5, 1456, 9965, 50141, 29991, 1258, 8, 643, 4, 38, 216, 89, 18, 10, 266, 528, 7, 28, 1660, 423, 452, 4, 166, 33, 57, 608, 84, 308, 557, 8, 546, 23, 5, 913, 15, 12925, 6, 16852, 8, 22766, 4128, 4898, 4, 50121, 50118, 20689, 5144, 12051, 3326, 35, 2647, 6, 14, 18, 269, 7163, 142, 127, 2969, 21, 14, 42, 12426, 589, 557, 50141, 12186, 31716, 8652, 70, 167, 1117, 1293, 20070, 4, 50121, 50118, 39087, 605, 6227, 35, 280, 189, 28, 1528, 13, 5, 866, 4315, 4, 20240, 6, 89, 32, 1027, 6665, 30, 4471, 16744, 857, 8, 10, 165, 23, 12426, 589, 15, 5, 913, 9, 2404, 15, 5, 12093, 866, 6, 53, 13, 12925, 8, 16852, 8, 22766, 4128, 6397, 6, 24, 18, 25, 5, 7062, 1863, 50141, 995, 17422, 4, 2], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'labels': [0, 1779, 7345, 5, 21949, 14, 5, 5295, 6630, 58, 2713, 19, 23, 5, 1151, 6, 16071, 219, 1604, 3273, 66, 14, 171, 2433, 74, 3327, 5, 2358, 1068, 9, 5, 6630, 6, 217, 549, 24, 74, 28, 10, 22, 2362, 432, 113, 5665, 50, 10, 22, 14861, 113, 65, 4, 1648, 600, 144, 7697, 58, 1567, 5, 22, 2362, 432, 113, 5665, 6, 8003, 605, 6227, 21, 3230, 14, 5, 723, 1265, 2404, 447, 333, 56, 57, 529, 187, 772, 336, 8, 682, 503, 56, 57, 3918, 1736, 3353, 7, 1306, 14, 51, 58, 1950, 2460, 13, 5, 801, 1391, 1272, 4, 2]}.
***** Running training *****
  Num examples = 986
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9860
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 18.1559, 'rouge2': 1.123, 'rougeL': 15.0373, 'rougeLsum': 17.3029}, 'ppl': {'perplexity': 292.3921, 'ref_perplexity': 757.2338}, 'bertscore': {'precision': 74.953, 'recall': 79.4153, 'f1': 77.1104}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 15.103, 'rouge2': 4.255, 'rougeL': 12.349, 'rougeLsum': 13.3001}, 'ppl': {'perplexity': 30.0299, 'ref_perplexity': 331.5918}, 'bertscore': {'precision': 86.3318, 'recall': 82.9807, 'f1': 84.612}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 19.3974, 'rouge2': 4.87, 'rougeL': 14.3628, 'rougeLsum': 16.9639}, 'ppl': {'perplexity': 27.4452, 'ref_perplexity': 236.6037}, 'bertscore': {'precision': 86.2989, 'recall': 83.1797, 'f1': 84.7007}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.4249, 'rouge2': 6.2996, 'rougeL': 16.3018, 'rougeLsum': 20.9816}, 'ppl': {'perplexity': 89.7247, 'ref_perplexity': 212.7915}, 'bertscore': {'precision': 85.1875, 'recall': 83.8658, 'f1': 84.513}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.1735, 'rouge2': 5.9608, 'rougeL': 16.7843, 'rougeLsum': 20.988}, 'ppl': {'perplexity': 29.2669, 'ref_perplexity': 206.9604}, 'bertscore': {'precision': 86.021, 'recall': 83.8921, 'f1': 84.9306}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.8649, 'rouge2': 5.9741, 'rougeL': 17.3317, 'rougeLsum': 22.1674}, 'ppl': {'perplexity': 21.0837, 'ref_perplexity': 211.9058}, 'bertscore': {'precision': 85.3368, 'recall': 84.1391, 'f1': 84.726}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.5866, 'rouge2': 6.0744, 'rougeL': 17.6855, 'rougeLsum': 22.7724}, 'ppl': {'perplexity': 18.0939, 'ref_perplexity': 228.9622}, 'bertscore': {'precision': 85.1294, 'recall': 84.1477, 'f1': 84.628}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.9841, 'rouge2': 6.5074, 'rougeL': 17.7332, 'rougeLsum': 23.8043}, 'ppl': {'perplexity': 24.3044, 'ref_perplexity': 251.2324}, 'bertscore': {'precision': 85.5308, 'recall': 84.4254, 'f1': 84.9652}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.2459, 'rouge2': 6.0669, 'rougeL': 16.8945, 'rougeLsum': 22.219}, 'ppl': {'perplexity': 32.8673, 'ref_perplexity': 275.0033}, 'bertscore': {'precision': 85.1581, 'recall': 84.2735, 'f1': 84.7062}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.7393, 'rouge2': 6.2108, 'rougeL': 17.2433, 'rougeLsum': 23.4094}, 'ppl': {'perplexity': 22.2364, 'ref_perplexity': 310.6809}, 'bertscore': {'precision': 84.8353, 'recall': 84.4069, 'f1': 84.6106}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.857, 'rouge2': 5.7035, 'rougeL': 16.5372, 'rougeLsum': 21.232}, 'ppl': {'perplexity': 19.8213, 'ref_perplexity': 352.6189}, 'bertscore': {'precision': 85.345, 'recall': 84.4013, 'f1': 84.859}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.0787, 'rouge2': 5.3804, 'rougeL': 15.7882, 'rougeLsum': 20.9703}, 'ppl': {'perplexity': 35.0614, 'ref_perplexity': 384.1976}, 'bertscore': {'precision': 85.2815, 'recall': 84.5859, 'f1': 84.923}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.9947, 'rouge2': 5.4013, 'rougeL': 15.8294, 'rougeLsum': 20.8785}, 'ppl': {'perplexity': 36.7417, 'ref_perplexity': 421.9664}, 'bertscore': {'precision': 85.0769, 'recall': 84.5424, 'f1': 84.8002}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.8525, 'rouge2': 4.8384, 'rougeL': 15.1973, 'rougeLsum': 20.4855}, 'ppl': {'perplexity': 29.4216, 'ref_perplexity': 463.6597}, 'bertscore': {'precision': 85.3617, 'recall': 84.6878, 'f1': 85.0148}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.3537, 'rouge2': 5.6844, 'rougeL': 16.5218, 'rougeLsum': 22.429}, 'ppl': {'perplexity': 29.9897, 'ref_perplexity': 524.1414}, 'bertscore': {'precision': 85.2239, 'recall': 84.7709, 'f1': 84.9897}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.429, 'rouge2': 5.2833, 'rougeL': 16.5928, 'rougeLsum': 22.1619}, 'ppl': {'perplexity': 30.0994, 'ref_perplexity': 549.8839}, 'bertscore': {'precision': 85.1866, 'recall': 84.8185, 'f1': 84.9937}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.0545, 'rouge2': 5.3122, 'rougeL': 15.9582, 'rougeLsum': 22.0199}, 'ppl': {'perplexity': 23.8223, 'ref_perplexity': 579.6774}, 'bertscore': {'precision': 85.0501, 'recall': 84.847, 'f1': 84.9417}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.884, 'rouge2': 5.3458, 'rougeL': 16.1559, 'rougeLsum': 22.283}, 'ppl': {'perplexity': 27.7905, 'ref_perplexity': 608.6023}, 'bertscore': {'precision': 85.1802, 'recall': 84.7849, 'f1': 84.974}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.0283, 'rouge2': 5.1015, 'rougeL': 15.8836, 'rougeLsum': 21.6069}, 'ppl': {'perplexity': 35.4646, 'ref_perplexity': 618.2863}, 'bertscore': {'precision': 85.1266, 'recall': 84.7758, 'f1': 84.9432}}
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.2721, 'rouge2': 5.4368, 'rougeL': 16.1329, 'rougeLsum': 21.9947}, 'ppl': {'perplexity': 29.0893, 'ref_perplexity': 631.4477}, 'bertscore': {'precision': 85.0571, 'recall': 84.7587, 'f1': 84.9}}

Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Round 10
Start Training!
Sample 42 of the training set: {'input_ids': [0, 38182, 3916, 2072, 9020, 18, 5209, 15, 12628, 3471, 4, 47385, 50121, 50118, 33347, 4827, 35, 128, 28421, 479, 41881, 479, 978, 52, 33, 14872, 19, 5, 12628, 3471, 479, 50121, 50118, 10006, 16382, 35, 3216, 2156, 8578, 98, 52, 4776, 10, 6317, 9352, 11, 84, 6348, 2156, 8, 52, 95, 52, 3996, 106, 8, 52, 67, 156, 106, 3300, 66, 10, 31067, 2156, 8, 52, 303, 14, 5, 25522, 31375, 1536, 9834, 24303, 1434, 32, 45, 3700, 1372, 19, 595, 6063, 5656, 479, 23670, 219, 292, 135, 206, 51, 214, 11355, 479, 381, 25529, 135, 236, 25522, 417, 32062, 6920, 254, 24303, 51, 348, 25522, 417, 32062, 6920, 254, 24303, 32, 2882, 7, 1930, 55, 2156, 61, 16, 205, 340, 13, 201, 7252, 114, 52, 146, 24, 356, 33639, 906, 2156, 8, 5072, 885, 52, 95, 240, 402, 14, 269, 38, 1266, 89, 18, 103, 97, 332, 62, 89, 2156, 53, 51, 25522, 417, 32062, 6920, 254, 24303, 24, 782, 7, 28, 4543, 1222, 5144, 8, 24, 25522, 417, 32062, 6920, 254, 24303, 53, 648, 2007, 479, 50121, 50118, 44518, 39322, 35, 25522, 29183, 24303, 15321, 479, 50121, 50118, 10006, 16382, 35, 407, 14, 18, 269, 99, 52, 240, 7, 109, 479, 178, 52, 240, 52, 240, 24, 7, 28, 2007, 2156, 648, 24, 782, 7, 28, 239, 12, 9406, 546, 479, 407, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 44518, 39322, 35, 178, 14, 3099, 99, 17487, 50121, 50118, 10006, 16382, 35, 2011, 25522, 417, 32062, 6920, 254, 24303, 252, 101, 38, 4443, 304, 5, 14893, 10, 319, 479, 50121, 50118, 44518, 39322, 35, 8487, 479, 50121, 50118, 10006, 16382, 35, 8976, 479, 50121, 50118, 44518, 39322, 35, 25522, 29183, 24303, 50121, 50118, 10006, 16382, 35, 38, 218, 75, 216, 479, 85, 18, 31, 127, 37463, 557, 479, 50121, 50118, 33347, 4827, 35, 8487, 2156, 99, 109, 47, 475, 50121, 50118, 44518, 39322, 35, 5143, 479, 50121, 50118, 10006, 16382, 35, 1308, 165, 938, 75, 182, 699, 479, 50121, 50118, 33347, 4827, 35, 5534, 2156, 38, 437, 6661, 479, 50121, 50118, 44518, 39322, 35, 4041, 304, 2724, 135, 9, 5, 14893, 479, 50121, 50118, 33347, 4827, 35, 653, 109, 47, 1266, 30, 7252, 5, 595, 6063, 5656, 109, 45, 914, 157, 19, 5, 1633, 5759, 9, 5, 3018, 2156, 101, 51, 33, 7, 1228, 5, 14893, 479, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 280, 18, 8578, 479, 38, 38, 206, 24, 18, 101, 5, 4675, 4411, 3018, 2156, 50121, 50118, 33347, 4827, 35, 8487, 479, 50121, 50118, 10006, 16382, 35, 9641, 101, 5, 4675, 79, 969, 14, 5, 4675, 1980, 32, 55, 2632, 50121, 50118, 33347, 4827, 35, 5534, 2156, 235, 479, 50121, 50118, 10006, 16382, 35, 8, 1434, 218, 75, 269, 240, 70, 9, 5, 14893, 14, 32, 5558, 15, 89, 2156, 142, 51, 129, 304, 2724, 135, 9, 5, 14893, 269, 479, 50121, 50118, 33347, 4827, 35, 20, 14893, 479, 8487, 479, 50121, 50118, 36926, 13700, 31275, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 8976, 479, 8487, 479, 50121, 50118, 36926, 13700, 31275, 35, 166, 129, 304, 2724, 228, 715, 9, 84, 15813, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 44518, 39322, 35, 25522, 31375, 1536, 9834, 24303, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 2497, 477, 479, 50121, 50118, 33347, 4827, 35, 85, 1364, 479, 50121, 50118, 10006, 16382, 35, 85, 18, 10, 2139, 9247, 479, 50121, 50118, 36926, 13700, 31275, 35, 25522, 31375, 1536, 9834, 24303, 11380, 479, 50121, 50118, 33347, 4827, 35, 25522, 31375, 1536, 9834, 24303, 19325, 13, 5, 220, 7117, 17487, 50121, 50118, 10006, 16382, 35, 256, 119, 12, 298, 5471, 479, 25522, 31375, 1536, 9834, 24303, 178, 98, 82, 224, 14, 51, 3700, 2217, 24, 2156, 25, 47, 2512, 216, 2156, 142, 47, 1153, 2217, 110, 6063, 797, 70, 5, 86, 2156, 50121, 50118, 33347, 4827, 35, 44258, 479, 50121, 50118, 10006, 16382, 35, 203, 101, 143, 650, 30170, 101, 10, 13605, 2156, 50121, 50118, 44518, 39322, 35, 13932, 479, 50121, 50118, 10006, 16382, 35, 8, 51, 25522, 417, 32062, 6920, 254, 24303, 52, 240, 402, 2007, 2156, 142, 144, 82, 2156, 157, 16984, 237, 135, 224, 14, 24, 18, 95, 350, 203, 86, 7, 1532, 141, 7, 304, 10, 92, 65, 2156, 8, 52, 218, 75, 236, 7, 213, 25522, 417, 32062, 6920, 254, 24303, 52, 218, 75, 236, 7, 10104, 350, 444, 31, 5, 2340, 2526, 6063, 2156, 50121, 50118, 44518, 39322, 35, 208, 50121, 50118, 10006, 16382, 35, 53, 38, 1266, 51, 109, 240, 7, 28, 441, 7, 3058, 24, 2156, 8, 248, 1215, 104, 1215, 100, 1215, 2156, 38, 437, 45, 182, 686, 99, 14, 16, 479, 50121, 50118, 33347, 4827, 35, 85, 18, 8578, 479, 85, 18, 182, 505, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 3216, 2156, 24, 16, 505, 13, 5, 6063, 797, 232, 479, 50121, 50118, 33347, 4827, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 44518, 39322, 35, 15321, 2156, 16, 14, 101, 110, 25522, 417, 32062, 6920, 254, 24303, 35389, 20890, 2857, 101, 110, 865, 7467, 50, 402, 17487, 50121, 50118, 10006, 16382, 35, 840, 50121, 50118, 33347, 4827, 35, 9918, 28, 2156, 11380, 479, 50121, 50118, 10006, 16382, 35, 23129, 3544, 479, 50121, 50118, 36926, 13700, 31275, 35, 1832, 52, 269, 240, 326, 7, 694, 55, 335, 15, 99, 248, 1215, 104, 1215, 100, 1215, 16, 17487, 50121, 50118, 44518, 39322, 35, 2011, 25522, 417, 32062, 6920, 254, 24303, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 5534, 479, 50121, 50118, 10006, 16382, 35, 23129, 11380, 2156, 14, 18, 99, 127, 3748, 1082, 26, 2156, 38, 50121, 50118, 44518, 39322, 35, 5331, 2156, 3149, 2156, 476, 479, 50121, 50118, 33347, 4827, 35, 38, 206, 14, 18, 10, 1256, 205, 4443, 600, 479, 50121, 50118, 10006, 16382, 35, 218, 75, 216, 479, 50121, 50118, 44518, 39322, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 8976, 2156, 38, 74, 6876, 98, 479, 50121, 50118, 44518, 39322, 35, 85, 18, 101, 114, 47, 214, 1826, 24, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 10006, 16382, 35, 38, 206, 52, 214, 3518, 7, 216, 24, 25, 6063, 797, 2320, 479, 50121, 50118, 33347, 4827, 35, 8976, 479, 85, 18, 8578, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 10006, 16382, 35, 25522, 31375, 1536, 9834, 24303, 125, 67, 579, 98, 5, 4238, 2156, 5, 3149, 8, 5, 476, 14893, 32, 5, 144, 505, 15, 84, 138, 998, 47, 64, 465, 101, 5, 2167, 6732, 8082, 7, 141, 203, 349, 6148, 16, 341, 2156, 53, 167, 32, 5, 2299, 5, 299, 1980, 479, 50121, 50118, 33347, 4827, 35, 8487, 479, 4130, 7117, 17487, 50121, 50118, 10006, 16382, 35, 3216, 479, 178, 98, 5636, 38, 206, 14, 52, 240, 10, 2297, 2295, 12, 24882, 1521, 2156, 53, 24, 24, 269, 782, 7, 28, 2007, 479, 407, 584, 31, 1423, 110, 7117, 2156, 110, 5209, 2156, 5, 4675, 4411, 5, 3018, 12, 46314, 6398, 17467, 2156, 38, 206, 14, 52, 197, 213, 19, 402, 14, 18, 55, 3018, 12, 6928, 479, 50121, 50118, 33347, 4827, 35, 27913, 12, 6928, 479, 50121, 50118, 10006, 16382, 35, 4820, 5, 4675, 1980, 2156, 5, 7644, 2156, 3805, 7, 146, 24, 356, 55, 6336, 87, 24, 269, 16, 479, 12698, 5, 14749, 9, 5, 1152, 269, 782, 7, 28, 1687, 25, 7, 101, 99, 1907, 9, 14893, 109, 52, 269, 240, 15, 24, 479, 178, 24, 782, 7, 28, 490, 7, 10, 1810, 1186, 9, 2360, 2156, 98, 190, 600, 52, 240, 10, 650, 346, 9, 14893, 2156, 52, 67, 240, 7, 185, 11, 25522, 417, 32062, 6920, 254, 24303, 101, 32, 144, 82, 164, 7, 28, 634, 24, 13, 10, 211, 1215, 846, 1215, 495, 1215, 869, 2156, 10, 16703, 37660, 2156, 99, 99, 2230, 32, 52, 634, 24, 13, 2156, 25, 157, 25, 5, 1046, 1186, 479, 407, 52, 240, 10, 6605, 2156, 53, 45, 10, 9240, 2855, 2474, 3552, 13, 6061, 84, 1152, 479, 50121, 50118, 44518, 39322, 35, 25522, 29183, 24303, 50121, 50118, 10006, 16382, 35, 178, 67, 52, 303, 25522, 417, 32062, 6920, 254, 24303, 84, 165, 303, 14, 1901, 4972, 16, 25522, 417, 32062, 6920, 254, 24303, 24, 18, 101, 41, 62, 12, 463, 12, 7936, 631, 51, 269, 25522, 417, 32062, 6920, 254, 24303, 2360, 32, 269, 2509, 11, 24, 2156, 8, 187, 84, 4139, 303, 14, 82, 32, 2882, 7, 582, 55, 418, 13, 10, 6063, 13, 24, 7, 28, 55, 239, 12, 4684, 52, 115, 1701, 24, 479, 50121, 50118, 33347, 4827, 35, 178, 98, 95, 7, 25522, 417, 32062, 6920, 254, 24303, 95, 7, 14246, 30, 1901, 4972, 47, 1266, 51, 74, 224, 2156, 4238, 292, 2156, 8, 5, 631, 74, 213, 7, 4238, 292, 17487, 50121, 50118, 10006, 16382, 35, 38, 4443, 98, 2156, 11380, 479, 50121, 50118, 44518, 39322, 35, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 8487, 479, 50121, 50118, 44518, 39322, 35, 25522, 29183, 24303, 7, 95, 224, 2156, 147, 32, 47, 2156, 8, 631, 28, 26378, 2156, 47, 216, 479, 25522, 31375, 1536, 9834, 24303, 50121, 50118, 33347, 4827, 35, 25522, 31375, 1536, 9834, 24303, 5534, 2156, 14, 1017, 28, 9869, 479, 50121, 50118, 10006, 16382, 35, 8976, 2156, 38, 4443, 52, 64, 18107, 24, 101, 2156, 52, 64, 95, 860, 66, 430, 3505, 9, 1901, 4972, 624, 84, 6063, 3020, 479, 50121, 50118, 44518, 39322, 35, 8976, 479, 50121, 50118, 33347, 4827, 35, 25522, 31375, 1536, 9834, 24303, 31940, 75, 51, 25522, 417, 32062, 6920, 254, 24303, 7252, 399, 75, 84, 3429, 451, 15030, 10, 6063, 14, 47, 74, 1228, 5, 6148, 15, 5, 255, 1215, 846, 1215, 8, 24, 74, 25522, 417, 32062, 6920, 254, 24303, 5, 6063, 74, 28, 2462, 98, 114, 47, 33, 685, 24, 25522, 417, 32062, 6920, 254, 24303, 50121, 50118, 44518, 39322, 35, 85, 18, 24282, 101, 99, 5, 6063, 1028, 341, 7, 109, 479, 50121, 50118, 33347, 4827, 35, 256, 119, 479, 5534, 2156, 11380, 2156, 14, 18, 1528, 479, 50121, 50118, 44518, 39322, 35, 370, 216, 101, 213, 7, 5, 1542, 479, 50121, 50118, 33347, 4827, 35, 166, 115, 2299, 680, 14, 114, 52, 770, 7, 479, 50121, 50118, 44518, 39322, 35, 8976, 479, 50121, 50118, 33347, 4827, 35, 318, 24, 18, 624, 84, 425, 479, 8487, 479, 3945, 52, 1227, 13, 84, 94, 5209, 2156, 11899, 17487, 2], 'attention_masklabels': [0, 10006, 16382, 78, 1373, 5, 775, 9, 49, 6348, 3457, 4, 85, 21, 303, 14, 1434, 6813, 10, 33639, 906, 53, 648, 20584, 6063, 6, 8, 25, 10, 898, 6, 49, 1152, 197, 28, 239, 12, 9406, 546, 53, 67, 3018, 12, 6928, 4, 1773, 5, 557, 303, 14, 144, 1434, 74, 129, 304, 2724, 135, 9, 5, 14893, 6, 51, 1276, 7, 129, 489, 5, 144, 2139, 1980, 15, 49, 6063, 4, 16034, 67, 1695, 14, 6398, 17467, 3805, 7, 28, 685, 2773, 4, 3347, 6, 187, 1901, 4972, 21, 1406, 566, 1434, 6, 5, 6063, 197, 33, 42, 5043, 25, 157, 4, 2]}.
***** Running training *****
  Num examples = 981
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 9820
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 19.5852, 'rouge2': 1.1116, 'rougeL': 16.4168, 'rougeLsum': 18.5403}, 'ppl': {'perplexity': 257.7903, 'ref_perplexity': 775.1722}, 'bertscore': {'precision': 77.0072, 'recall': 79.3653, 'f1': 78.1654}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 15.9032, 'rouge2': 3.2345, 'rougeL': 12.2221, 'rougeLsum': 14.2583}, 'ppl': {'perplexity': 42.5526, 'ref_perplexity': 360.1063}, 'bertscore': {'precision': 84.7974, 'recall': 82.6474, 'f1': 83.7026}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 17.6096, 'rouge2': 4.1064, 'rougeL': 13.5206, 'rougeLsum': 15.7094}, 'ppl': {'perplexity': 10.4918, 'ref_perplexity': 259.5449}, 'bertscore': {'precision': 85.0387, 'recall': 83.119, 'f1': 84.0545}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 19.3787, 'rouge2': 4.7541, 'rougeL': 15.1223, 'rougeLsum': 17.413}, 'ppl': {'perplexity': 36.4802, 'ref_perplexity': 243.969}, 'bertscore': {'precision': 85.2686, 'recall': 83.3167, 'f1': 84.2705}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 20.0165, 'rouge2': 4.1212, 'rougeL': 15.1276, 'rougeLsum': 17.9439}, 'ppl': {'perplexity': 48.4057, 'ref_perplexity': 236.4135}, 'bertscore': {'precision': 85.2519, 'recall': 83.6673, 'f1': 84.4416}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.8209, 'rouge2': 5.4723, 'rougeL': 17.1055, 'rougeLsum': 22.154}, 'ppl': {'perplexity': 37.8585, 'ref_perplexity': 242.6398}, 'bertscore': {'precision': 84.5599, 'recall': 83.8839, 'f1': 84.2067}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.5254, 'rouge2': 5.4302, 'rougeL': 17.0871, 'rougeLsum': 22.018}, 'ppl': {'perplexity': 39.8135, 'ref_perplexity': 256.6948}, 'bertscore': {'precision': 84.8003, 'recall': 84.2035, 'f1': 84.4844}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.0738, 'rouge2': 5.4372, 'rougeL': 17.2979, 'rougeLsum': 23.4528}, 'ppl': {'perplexity': 23.7187, 'ref_perplexity': 284.5372}, 'bertscore': {'precision': 83.7529, 'recall': 84.1708, 'f1': 83.9458}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.3071, 'rouge2': 5.038, 'rougeL': 17.313, 'rougeLsum': 22.0823}, 'ppl': {'perplexity': 68.2564, 'ref_perplexity': 313.4258}, 'bertscore': {'precision': 84.7475, 'recall': 84.0359, 'f1': 84.3788}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.38, 'rouge2': 4.9037, 'rougeL': 17.1204, 'rougeLsum': 22.6709}, 'ppl': {'perplexity': 35.2951, 'ref_perplexity': 354.988}, 'bertscore': {'precision': 84.3557, 'recall': 84.3848, 'f1': 84.3598}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.6911, 'rouge2': 5.1446, 'rougeL': 17.3955, 'rougeLsum': 23.7463}, 'ppl': {'perplexity': 45.8825, 'ref_perplexity': 411.0122}, 'bertscore': {'precision': 84.2844, 'recall': 84.3431, 'f1': 84.2999}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.4724, 'rouge2': 4.6122, 'rougeL': 16.9047, 'rougeLsum': 22.4806}, 'ppl': {'perplexity': 49.2978, 'ref_perplexity': 461.4598}, 'bertscore': {'precision': 84.2707, 'recall': 84.3759, 'f1': 84.313}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.0569, 'rouge2': 5.0687, 'rougeL': 17.4056, 'rougeLsum': 23.4064}, 'ppl': {'perplexity': 38.5108, 'ref_perplexity': 487.9254}, 'bertscore': {'precision': 84.2064, 'recall': 84.4004, 'f1': 84.2926}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.0791, 'rouge2': 4.787, 'rougeL': 17.2282, 'rougeLsum': 23.5165}, 'ppl': {'perplexity': 40.1035, 'ref_perplexity': 536.9896}, 'bertscore': {'precision': 84.139, 'recall': 84.5338, 'f1': 84.3266}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.8134, 'rouge2': 4.7883, 'rougeL': 17.4334, 'rougeLsum': 23.5538}, 'ppl': {'perplexity': 34.3422, 'ref_perplexity': 597.2595}, 'bertscore': {'precision': 84.2419, 'recall': 84.5061, 'f1': 84.3637}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.1617, 'rouge2': 4.5675, 'rougeL': 16.862, 'rougeLsum': 23.1873}, 'ppl': {'perplexity': 34.8517, 'ref_perplexity': 625.1843}, 'bertscore': {'precision': 84.2772, 'recall': 84.5403, 'f1': 84.3983}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.7506, 'rouge2': 4.6185, 'rougeL': 16.8577, 'rougeLsum': 23.4543}, 'ppl': {'perplexity': 45.5912, 'ref_perplexity': 671.5508}, 'bertscore': {'precision': 84.5038, 'recall': 84.5751, 'f1': 84.5322}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.1783, 'rouge2': 4.321, 'rougeL': 16.6525, 'rougeLsum': 22.9129}, 'ppl': {'perplexity': 35.7829, 'ref_perplexity': 703.4109}, 'bertscore': {'precision': 84.4185, 'recall': 84.5557, 'f1': 84.4796}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.8573, 'rouge2': 4.3904, 'rougeL': 16.76, 'rougeLsum': 22.9552}, 'ppl': {'perplexity': 79.0328, 'ref_perplexity': 719.7939}, 'bertscore': {'precision': 84.4761, 'recall': 84.5794, 'f1': 84.5196}}
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.9513, 'rouge2': 4.1992, 'rougeL': 16.7158, 'rougeLsum': 22.4719}, 'ppl': {'perplexity': 47.0249, 'ref_perplexity': 735.0195}, 'bertscore': {'precision': 84.4441, 'recall': 84.6155, 'f1': 84.5222}}

Start Predicting!
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Round All
Start Training!
Sample 685 of the training set: {'input_ids': [0, 38182, 3916, 2072, 5, 3221, 59, 19540, 743, 8, 2948, 108, 7094, 4, 47385, 50121, 50118, 104, 811, 272, 11760, 890, 811, 3326, 35, 20, 1585, 6, 11, 14981, 6, 16, 10, 2007, 65, 6, 9, 768, 6, 16, 24, 45, 116, 125, 99, 24, 473, 16, 50141, 694, 10, 5616, 3221, 15, 99, 205, 19540, 16, 8, 99, 8882, 6448, 32, 5, 144, 2375, 578, 6025, 16, 6, 8882, 6448, 14, 1041, 64, 304, 1195, 87, 2166, 8653, 4, 1832, 47, 206, 6, 3891, 6, 14, 89, 18, 10, 240, 7, 3754, 203, 55, 11, 8864, 7, 109, 19, 19540, 8, 11, 323, 518, 13, 1232, 11, 1110, 9, 19540, 6, 8, 14, 25, 233, 9, 41, 419, 6530, 1860, 14, 18, 55, 1029, 12, 3109, 9339, 8, 6295, 87, 99, 50141, 1694, 33, 23, 1455, 116, 50121, 50118, 22403, 324, 3040, 3326, 35, 2647, 6, 52, 32, 2623, 5, 1585, 25, 233, 9, 10, 203, 6012, 3737, 9, 323, 13, 408, 8, 49, 1041, 6, 61, 6, 9, 768, 6, 16, 416, 11, 317, 4, 152, 3334, 1171, 5, 128, 46102, 154, 4, 12192, 24, 86, 108, 637, 6, 61, 5026, 7, 244, 1041, 109, 5, 275, 633, 14, 51, 64, 30, 1976, 1313, 4965, 15, 19540, 8, 335, 4, 178, 52, 214, 416, 4568, 122, 7, 2935, 14, 6, 142, 6, 9, 768, 6, 14, 129, 1411, 62, 7, 1046, 262, 8, 2656, 19, 743, 59, 141, 47, 10731, 19, 110, 1159, 114, 51, 214, 1202, 23, 5820, 498, 8, 114, 51, 33, 23282, 31860, 4, 85, 16, 182, 157, 341, 30, 1041, 4, 125, 6, 9, 768, 6, 42, 2309, 40, 213, 62, 7, 504, 107, 793, 6, 8, 98, 5, 743, 189, 28, 182, 430, 4, 407, 6, 52, 214, 416, 1158, 7, 3886, 7, 2935, 14, 128, 46102, 154, 4, 12192, 24, 86, 108, 637, 4, 178, 172, 6, 3334, 6, 89, 18, 5, 10547, 518, 14, 492, 899, 7, 244, 8, 7, 3720, 1313, 19540, 6, 2781, 30, 400, 168, 6, 474, 6, 1265, 6, 592, 518, 6, 592, 2427, 8, 5, 371, 1293, 4, 166, 40, 28, 5513, 70, 167, 2244, 14, 694, 14, 10547, 544, 7, 244, 323, 1041, 8, 7, 1323, 15, 42, 335, 4, 1892, 6, 89, 40, 28, 5, 55, 3656, 4548, 6, 215, 25, 22014, 2776, 8, 15669, 1234, 6, 61, 904, 244, 8, 2949, 4, 125, 99, 38, 348, 626, 16, 38, 348, 553, 5, 503, 7, 2324, 66, 10, 20410, 3325, 7, 192, 147, 5, 323, 16, 8, 147, 5, 10778, 32, 50, 1616, 7, 109, 55, 6, 1605, 198, 335, 8, 2949, 15, 1313, 10514, 7, 2166, 8653, 6, 53, 67, 55, 3924, 4, 407, 6, 52, 32, 546, 7, 192, 147, 5, 10778, 32, 4, 38, 206, 1041, 109, 3805, 7, 304, 335, 8, 860, 7, 120, 244, 11, 171, 430, 1319, 4, 83, 182, 739, 346, 6, 888, 6, 109, 304, 5, 2888, 4, 38, 21, 3911, 6, 888, 6, 14, 98, 171, 341, 5, 2888, 7, 120, 335, 4, 5763, 1394, 49, 8826, 6, 49, 1232, 6, 49, 964, 6, 8, 213, 7, 2244, 4, 85, 18, 215, 10, 1810, 1186, 14, 52, 240, 14, 20410, 3325, 8, 52, 240, 7, 192, 147, 52, 240, 7, 342, 11, 55, 323, 4, 50121, 50118, 104, 811, 272, 11760, 890, 811, 3326, 35, 38, 437, 4343, 14, 47, 214, 164, 7, 2883, 14, 3325, 6, 142, 5, 1283, 14, 52, 348, 829, 31, 10, 346, 9, 430, 9969, 16, 14, 89, 965, 75, 615, 915, 11, 2015, 11, 5, 323, 518, 11, 5, 419, 107, 6, 8, 14, 89, 16, 10, 588, 240, 13, 5, 1056, 624, 1621, 213, 124, 7, 419, 6530, 8, 7, 33, 10, 203, 55, 1029, 12, 3109, 9339, 1860, 4, 370, 348, 2801, 10, 346, 9, 2244, 447, 15, 430, 4785, 6, 2532, 6, 53, 2532, 89, 18, 10, 240, 7, 836, 106, 70, 561, 4, 370, 1067, 59, 5, 128, 46102, 154, 4, 12192, 24, 86, 108, 637, 6, 53, 38, 206, 24, 18, 41, 804, 637, 4296, 6, 8, 22014, 2776, 578, 10932, 6, 82, 54, 2725, 167, 7484, 465, 106, 5616, 6, 53, 6, 9, 768, 6, 24, 18, 45, 577, 420, 5295, 8, 24, 18, 45, 577, 7, 358, 4095, 4, 345, 16, 10, 3552, 14, 16, 577, 149, 1304, 11, 272, 16541, 13093, 578, 35982, 47, 32, 2542, 9, 24, 578, 34366, 29921, 10426, 6, 19, 6020, 16540, 20854, 1033, 6, 54, 34, 57, 447, 15, 42, 13, 10, 346, 9, 107, 122, 6, 182, 5116, 6, 147, 1304, 6, 1041, 8, 5, 408, 173, 561, 15, 19540, 6448, 14, 32, 1313, 4, 38, 5170, 114, 24, 18, 86, 7, 206, 59, 5222, 14, 25, 233, 9, 41, 419, 6530, 1860, 420, 5295, 4, 6259, 47, 64, 75, 492, 10, 2167, 1948, 452, 6, 53, 189, 38, 1394, 47, 7, 185, 10, 356, 23, 14, 116, 653, 1379, 162, 16, 14, 5, 1585, 16, 164, 149, 53, 89, 18, 45, 615, 173, 8941, 7, 1265, 8, 519, 82, 18, 323, 13, 430, 6448, 6, 55, 1313, 6448, 6, 11, 127, 2979, 6, 9, 19540, 4, 345, 18, 10, 588, 240, 7, 517, 8, 7, 3754, 11, 14, 443, 8, 2532, 517, 418, 1567, 14, 173, 4, 50121, 50118, 22403, 324, 3040, 3326, 35, 2647, 6, 1819, 6, 38, 206, 14, 16, 5, 3508, 9, 5, 20410, 3325, 6, 7, 192, 99, 16, 1800, 6, 147, 383, 240, 7, 28, 4939, 6, 8, 14, 18, 99, 52, 214, 164, 7, 1701, 4, 36665, 10426, 578, 100, 216, 24, 18, 182, 1800, 131, 38, 524, 2542, 9, 14, 3020, 4, 38, 206, 89, 32, 19054, 70, 81, 5295, 9, 269, 205, 2017, 6, 53, 6, 1819, 6, 38, 437, 686, 52, 240, 7, 492, 55, 323, 7, 1041, 11, 5, 419, 107, 6, 8, 38, 206, 51, 214, 129, 350, 7785, 7, 33, 24, 25, 157, 4, 4278, 32, 182, 33052, 23, 14, 1046, 8, 419, 6530, 16, 5, 762, 7, 171, 9, 5, 743, 14, 52, 33, 7, 432, 19, 423, 15, 4, 50121, 50118, 104, 811, 272, 11760, 890, 811, 3326, 35, 8487, 6, 3392, 47, 4, 50121, 50118, 34052, 858, 3864, 21851, 3326, 35, 3837, 47, 4, 166, 214, 164, 7, 671, 7, 103, 9, 5, 19540, 743, 423, 6, 53, 11, 5, 10299, 52, 348, 300, 1142, 31, 91, 13597, 871, 4, 50121, 50118, 725, 4550, 179, 871, 3326, 35, 1801, 7, 185, 24, 15, 5, 220, 1149, 31, 99, 11065, 3695, 282, 272, 11760, 890, 811, 21, 1996, 59, 578, 179, 1304, 6, 32, 2948, 1227, 13, 42, 2309, 116, 50121, 50118, 22403, 324, 3040, 3326, 35, 374, 84, 5574, 333, 6, 5, 1265, 1293, 16, 4625, 4, 252, 348, 283, 7, 5, 78, 529, 9, 5, 5574, 333, 4, 407, 6, 51, 214, 164, 7, 28, 1950, 963, 11, 5, 7094, 4, 11105, 6, 22997, 337, 8653, 21, 4968, 11, 1304, 10, 251, 86, 536, 6, 8, 38, 206, 5, 1265, 1293, 16, 182, 8440, 9, 42, 517, 4, 125, 11, 1110, 9, 5, 4199, 13, 2948, 7, 28, 1227, 13, 24, 578, 2413, 34978, 6, 5, 4199, 637, 34, 300, 7, 28, 3448, 23, 5197, 11, 358, 882, 8, 1819, 3448, 23, 2948, 4, 50121, 50118, 725, 4550, 179, 871, 3326, 35, 407, 6, 114, 38, 21, 10, 3254, 11, 41, 1736, 334, 6, 99, 761, 9, 7094, 109, 47, 206, 38, 197, 1057, 116, 50121, 50118, 22403, 324, 3040, 3326, 35, 370, 216, 42, 357, 87, 162, 6, 519, 57, 55, 11, 5, 1265, 882, 87, 162, 6, 53, 38, 206, 2948, 32, 4752, 15, 430, 1667, 9, 25027, 2309, 122, 6, 8, 33, 11, 12, 11131, 1058, 360, 8, 1058, 7484, 4, 178, 6, 1819, 6, 2532, 42, 74, 28, 233, 9, 14, 578, 7755, 9, 5, 1058, 14, 2948, 120, 4, 152, 74, 33, 7, 28, 14948, 88, 14, 4, 50121, 50118, 725, 4550, 179, 871, 3326, 35, 509, 9, 5, 383, 14, 5, 496, 1544, 9, 3928, 14245, 174, 201, 21, 14, 51, 1979, 75, 236, 5, 701, 9, 14, 761, 9, 1058, 7, 283, 31, 2731, 11652, 4, 11258, 47, 2854, 19, 14, 116, 50121, 50118, 22403, 324, 3040, 3326, 35, 2647, 6, 38, 74, 33, 802, 42, 2345, 9, 2450, 74, 28, 14948, 88, 5, 1058, 51, 58, 634, 416, 6, 888, 4, 38, 1979, 75, 50141, 11990, 450, 24, 74, 240, 402, 2198, 2559, 4, 50121, 50118, 725, 4550, 179, 871, 3326, 35, 407, 6, 47, 206, 24, 197, 283, 31, 5, 2731, 1229, 14, 51, 304, 13, 1058, 116, 50121, 50118, 22403, 324, 3040, 3326, 35, 38, 206, 24, 115, 28, 14948, 11, 99, 51, 214, 416, 608, 4, 50121, 50118, 725, 4550, 179, 871, 3326, 35, 8487, 4, 178, 109, 47, 206, 14, 74, 28, 10, 1233, 943, 701, 50, 109, 47, 206, 14, 14, 74, 28, 9865, 116, 50121, 50118, 22403, 324, 3040, 3326, 35, 38, 74, 33, 802, 24, 74, 28, 9865, 4, 252, 416, 33, 1058, 7484, 59, 25027, 743, 6, 8, 42, 74, 28, 402, 14, 74, 28, 22416, 88, 14, 4, 50121, 50118, 725, 4550, 179, 871, 3326, 35, 370, 2801, 5, 5574, 333, 8, 5, 754, 14, 15969, 32, 4625, 15, 24, 4, 2615, 47, 95, 28, 10, 828, 18618, 59, 141, 51, 32, 4625, 456, 116, 38, 437, 45, 686, 38, 2037, 14, 4, 50121, 50118, 22403, 324, 3040, 3326, 35, 1832, 47, 236, 7, 6, 7836, 6, 142, 47, 58, 23, 5, 333, 116, 50121, 50118, 530, 9475, 10217, 1173, 35, 3216, 4, 407, 6, 1265, 32, 4625, 15, 24, 149, 5, 1544, 9, 12131, 9, 3061, 11, 5295, 6, 8, 51, 33, 10, 4915, 15, 5, 3461, 5574, 333, 6, 8, 52, 32, 447, 19, 106, 7, 1346, 54, 1493, 40, 28, 15, 5, 3685, 8, 2073, 1134, 14, 52, 214, 2749, 62, 14, 5, 692, 18, 416, 3244, 59, 4, 178, 52, 348, 67, 56, 5475, 19, 70, 9, 5, 721, 7811, 4, 38, 5636, 439, 8, 1834, 7, 106, 656, 11, 5, 76, 77, 5, 1585, 21, 145, 2942, 6, 829, 49, 6456, 8, 33, 26, 14, 38, 40, 213, 124, 8, 1994, 19, 106, 4, 50121, 50118, 725, 4550, 179, 871, 3326, 35, 8487, 4, 20, 383, 14, 32, 145, 1179, 98, 444, 578, 14656, 47, 224, 51, 214, 22213, 9, 5, 1379, 14, 5, 8438, 14469, 1458, 59, 6, 13, 1246, 6, 1435, 9, 1058, 116, 3945, 167, 6134, 9, 743, 1179, 116, 20, 7708, 8819, 9, 10345, 42, 1585, 578, 1322, 51, 1179, 116, 318, 45, 6, 99, 97, 743, 429, 28, 1179, 116, 50121, 50118, 530, 9475, 10217, 1173, 35, 407, 6, 38, 206, 14, 5, 1049, 1379, 14, 47, 348, 416, 1317, 25, 10, 1540, 32, 1122, 1379, 7, 167, 14, 33, 57, 1179, 1433, 4, 407, 6, 89, 18, 45, 932, 11, 1285, 7, 5, 383, 14, 52, 33, 3373, 6, 1169, 19, 5, 721, 7811, 50, 149, 5, 5574, 333, 6, 50, 148, 5, 9434, 675, 4, 178, 6, 25, 5, 692, 26, 6, 13, 5, 1647, 9, 209, 2345, 9, 383, 6, 2948, 6, 1265, 8, 97, 173, 34532, 416, 33, 6196, 11, 317, 6, 142, 42, 606, 223, 10, 28531, 16014, 696, 23, 65, 672, 4, 345, 32, 6196, 8, 5588, 14, 32, 416, 89, 14, 51, 70, 1407, 4, 20, 1394, 40, 28, 716, 198, 167, 28531, 16014, 6196, 8, 6, 3891, 6, 1265, 8, 97, 518, 2935, 49, 5588, 8, 6196, 15, 10, 1675, 1453, 25, 10, 948, 9, 768, 77, 143, 743, 101, 42, 32, 4873, 4, 345, 18, 10, 6012, 5377, 259, 4, 692, 6, 38, 218, 75, 216, 549, 47, 770, 7, 224, 932, 59, 5, 157, 12, 9442, 8, 5, 578, 50121, 50118, 22403, 324, 3040, 3326, 35, 3216, 4, 509, 9, 5, 383, 14, 38, 206, 42, 1540, 34, 57, 963, 11, 16, 52, 236, 7, 33, 10, 1086, 12, 8813, 1548, 4, 166, 236, 2536, 474, 8, 157, 12, 9442, 7, 28, 233, 9, 5, 169, 14, 5, 1086, 334, 4497, 6, 8, 5, 2040, 8, 141, 1304, 4949, 19, 12384, 8, 1041, 4, 178, 52, 236, 7, 1045, 14, 5466, 147, 89, 18, 117, 1593, 1883, 2], 'attention_masklabels': [0, 1620, 13, 5, 19540, 743, 6, 5, 2309, 74, 213, 62, 7, 504, 107, 793, 6, 1976, 19540, 335, 9, 430, 4864, 4, 1578, 6, 10, 20410, 3325, 74, 28, 2584, 66, 30, 503, 7, 2563, 3058, 2210, 10778, 8, 1616, 7, 109, 55, 4, 287, 13, 334, 743, 6, 2948, 74, 1532, 25027, 2309, 30, 5190, 1058, 7484, 6, 8, 5, 333, 1540, 74, 694, 6196, 8, 5588, 956, 7, 432, 19, 430, 1200, 4, 20, 3221, 172, 617, 3244, 59, 474, 8, 4358, 1272, 6, 217, 5, 6174, 9, 5, 173, 9, 474, 3074, 6, 2948, 108, 9582, 6, 8, 5, 11304, 13, 20410, 3325, 11, 5, 220, 1149, 4, 2]}.
***** Running training *****
  Num examples = 1095
  Num Epochs = 20
  Instantaneous batch size per device = 2
  Total train batch size (w. parallel, distributed & accumulation) = 2
  Gradient Accumulation steps = 1
  Total optimization steps = 10960
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 17.0905, 'rouge2': 0.9486, 'rougeL': 14.0767, 'rougeLsum': 15.7976}, 'ppl': {'perplexity': 156.9539, 'ref_perplexity': 588.348}, 'bertscore': {'precision': 77.7638, 'recall': 80.935, 'f1': 79.3059}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 16.8678, 'rouge2': 4.4488, 'rougeL': 13.5766, 'rougeLsum': 15.3293}, 'ppl': {'perplexity': 163.5336, 'ref_perplexity': 250.5526}, 'bertscore': {'precision': 87.1802, 'recall': 83.3468, 'f1': 85.2157}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 24.1074, 'rouge2': 6.2636, 'rougeL': 17.6609, 'rougeLsum': 22.1591}, 'ppl': {'perplexity': 172.2265, 'ref_perplexity': 177.5395}, 'bertscore': {'precision': 85.7915, 'recall': 83.7547, 'f1': 84.7544}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.5891, 'rouge2': 5.694, 'rougeL': 17.1394, 'rougeLsum': 21.0077}, 'ppl': {'perplexity': 54.2341, 'ref_perplexity': 159.3535}, 'bertscore': {'precision': 85.8732, 'recall': 83.9561, 'f1': 84.8983}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 22.172, 'rouge2': 5.7341, 'rougeL': 16.068, 'rougeLsum': 19.6686}, 'ppl': {'perplexity': 24.4135, 'ref_perplexity': 155.1237}, 'bertscore': {'precision': 86.6691, 'recall': 84.192, 'f1': 85.4046}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.1252, 'rouge2': 6.384, 'rougeL': 17.8039, 'rougeLsum': 22.411}, 'ppl': {'perplexity': 57.8336, 'ref_perplexity': 156.5868}, 'bertscore': {'precision': 85.8655, 'recall': 84.0766, 'f1': 84.9548}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 23.5422, 'rouge2': 5.9384, 'rougeL': 16.1673, 'rougeLsum': 21.2014}, 'ppl': {'perplexity': 30.4732, 'ref_perplexity': 166.0086}, 'bertscore': {'precision': 85.6235, 'recall': 84.3368, 'f1': 84.9661}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.804, 'rouge2': 6.5362, 'rougeL': 18.0038, 'rougeLsum': 23.5493}, 'ppl': {'perplexity': 45.5267, 'ref_perplexity': 176.2462}, 'bertscore': {'precision': 85.6521, 'recall': 84.6208, 'f1': 85.1263}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.2382, 'rouge2': 6.168, 'rougeL': 17.7836, 'rougeLsum': 24.3288}, 'ppl': {'perplexity': 45.0812, 'ref_perplexity': 198.8536}, 'bertscore': {'precision': 85.2804, 'recall': 84.5393, 'f1': 84.9018}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.7985, 'rouge2': 6.6274, 'rougeL': 18.0206, 'rougeLsum': 24.3771}, 'ppl': {'perplexity': 34.9071, 'ref_perplexity': 228.7998}, 'bertscore': {'precision': 85.6387, 'recall': 84.6665, 'f1': 85.1436}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.9119, 'rouge2': 6.5906, 'rougeL': 18.0926, 'rougeLsum': 24.3683}, 'ppl': {'perplexity': 29.339, 'ref_perplexity': 251.1862}, 'bertscore': {'precision': 85.6612, 'recall': 84.7705, 'f1': 85.208}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.6843, 'rouge2': 5.397, 'rougeL': 16.6901, 'rougeLsum': 22.4852}, 'ppl': {'perplexity': 90.2818, 'ref_perplexity': 285.2326}, 'bertscore': {'precision': 85.5035, 'recall': 84.7533, 'f1': 85.1211}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.2235, 'rouge2': 5.8915, 'rougeL': 17.3607, 'rougeLsum': 22.8232}, 'ppl': {'perplexity': 76.3357, 'ref_perplexity': 311.2162}, 'bertscore': {'precision': 85.4735, 'recall': 84.7537, 'f1': 85.1057}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.2503, 'rouge2': 5.537, 'rougeL': 16.8234, 'rougeLsum': 22.8469}, 'ppl': {'perplexity': 97.8954, 'ref_perplexity': 344.8369}, 'bertscore': {'precision': 85.4515, 'recall': 84.7898, 'f1': 85.1137}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 27.6863, 'rouge2': 6.0157, 'rougeL': 17.5305, 'rougeLsum': 23.983}, 'ppl': {'perplexity': 72.6605, 'ref_perplexity': 367.2001}, 'bertscore': {'precision': 85.1735, 'recall': 84.8813, 'f1': 85.0214}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 25.4938, 'rouge2': 5.0987, 'rougeL': 16.8305, 'rougeLsum': 22.249}, 'ppl': {'perplexity': 89.568, 'ref_perplexity': 397.4476}, 'bertscore': {'precision': 85.4039, 'recall': 84.7645, 'f1': 85.0774}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.5085, 'rouge2': 5.6269, 'rougeL': 17.246, 'rougeLsum': 23.1499}, 'ppl': {'perplexity': 68.6046, 'ref_perplexity': 423.513}, 'bertscore': {'precision': 85.4963, 'recall': 84.8197, 'f1': 85.1504}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.6774, 'rouge2': 5.6428, 'rougeL': 16.9783, 'rougeLsum': 23.2078}, 'ppl': {'perplexity': 80.1869, 'ref_perplexity': 444.9761}, 'bertscore': {'precision': 85.5264, 'recall': 84.8989, 'f1': 85.2063}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.9456, 'rouge2': 5.8514, 'rougeL': 17.444, 'rougeLsum': 23.3344}, 'ppl': {'perplexity': 71.7113, 'ref_perplexity': 457.614}, 'bertscore': {'precision': 85.5376, 'recall': 84.9185, 'f1': 85.2212}}
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
Using default tokenizer.
{'rouge': {'rouge1': 26.8585, 'rouge2': 5.7499, 'rougeL': 17.2478, 'rougeLsum': 23.1704}, 'ppl': {'perplexity': 89.6569, 'ref_perplexity': 459.414}, 'bertscore': {'precision': 85.4355, 'recall': 84.9103, 'f1': 85.1665}}

Start Predicting!
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 4
  Total eval batch size = 4
***** Running testing *****
  Num examples = 244
  Instantaneous batch size per device = 4
  Total eval batch size = 4




Parameter 'function'=<function get_datasets.<locals>.preprocess_function at 0x75e517337310> of the transform datasets.arrow_dataset.Dataset._map_single couldn't be hashed properly, a random hash was used instead. Make sure your transforms and parameters are serializable with pickle or dill for the dataset fingerprinting and caching to work. If you reuse this transform, the caching mechanism will consider it to be different from the previous calls and recompute everything. This warning is only showed once. Subsequent hashing failures won't be showed.

Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 1
  Total eval batch size = 1





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 1
  Total eval batch size = 1





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 1
  Total eval batch size = 1





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 1
  Total eval batch size = 1





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 1
  Total eval batch size = 1





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 1
  Total eval batch size = 1





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 1
  Total eval batch size = 1





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 1
  Total eval batch size = 1





Start Predicting!
***** Running testing *****
  Num examples = 109
  Instantaneous batch size per device = 1
  Total eval batch size = 1





Start Predicting!
***** Running testing *****
  Num examples = 114
  Instantaneous batch size per device = 1
  Total eval batch size = 1





Start Predicting!
***** Running testing *****
  Num examples = 237
  Instantaneous batch size per device = 1
  Total eval batch size = 1
***** Running testing *****
  Num examples = 244
  Instantaneous batch size per device = 1
  Total eval batch size = 1




